<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>CSS中的 BFC 是什么？</title>
      <link href="/front-end/CSS_What-Is-BFC/"/>
      <url>/front-end/CSS_What-Is-BFC/</url>
      
        <content type="html"><![CDATA[<p>BFC: 块级格式化上下文 (Block Formatting Context)</p><a id="more"></a><blockquote><p>建议先理解CSS的<a href="https://chenchenwuai.github.io/front-end/CSS_Box_Model/" target="_blank" rel="noopener">盒模型</a></p></blockquote><h2 id="什么是BFC"><a href="#什么是BFC" class="headerlink" title="什么是BFC"></a>什么是BFC</h2><p>BFC是Web页面的可视CSS渲染的一部分，是块盒子的布局过程发生的区域，也是浮动元素与其他元素交互的区域。W3C对BFC的定义如下：</p><blockquote><p>浮动元素和绝对定位元素，非块级盒子的块级容器（例如 inline-blocks, table-cells, 和 table-captions），以及overflow值不为“visiable”的块级盒子，都会为他们的内容创建新的BFC（块级格式上下文）。</p></blockquote><p>BFC是一个独立的布局环境，其中的元素布局是不受外界的影响，通俗的说可以把BFC理解为一个封闭的箱子，箱子内部的元素无论怎么放置，都不会影响到外部。并且在一个 BFC 中，块盒与行盒（行盒由一行中所有的内联元素所组成）都会垂直的沿着其父元素的边框排列。</p><p>下列方式会创建BFC：</p><ul><li>根元素（<code>&lt;html&gt;）</code></li><li>浮动元素（元素的 <code>float</code> 不是 <code>none</code>）</li><li>绝对定位元素（元素的 <code>position</code> 为 <code>absolute</code> 或 <code>fixed</code>）</li><li>行内块元素（元素的 <code>display</code> 为 <code>inline-block</code>）</li><li>表格单元格（元素的 <code>display</code> 为 <code>table-cell</code>，HTML表格单元格默认为该值）</li><li>表格标题    （元素的 <code>display</code> 为 <code>table-caption</code>，HTML表格标题默认为该值）</li><li><code>display</code> 值为 <code>flow-root</code> 的元素</li><li>匿名表格单元格元素（元素的 <code>display</code> 为 <code>table、``table-row</code>、 <code>table-row-group、``table-header-group、``table-footer-group</code>（分别是HTML table、row、tbody、thead、tfoot 的默认属性）或 <code>inline-table</code>）</li><li><code>overflow</code> 值不为 <code>visible</code> 的块元素</li><li><code>contain</code> 值为 <code>layout</code>、<code>content</code>或 paint 的元素</li><li>弹性元素（<code>display</code> 为 <code>flex</code> 或 <code>inline-flex</code>元素的直接子元素）</li><li>网格元素（<code>display</code> 为 <code>grid</code> 或 <code>inline-grid</code> 元素的直接子元素）</li><li>多列容器（元素的 <a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/column-count" target="_blank" rel="noopener"><code>column-count</code></a> 或 <a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/column-width" target="_blank" rel="noopener"><code>column-width</code></a> 不为 <code>auto，包括 ``column-count</code> 为 <code>1</code>）</li><li><code>column-span</code> 为 <code>all</code> 的元素始终会创建一个新的BFC，即使该元素没有包裹在一个多列容器中（<a href="https://github.com/w3c/csswg-drafts/commit/a8634b96900279916bd6c505fda88dda71d8ec51" target="_blank" rel="noopener">标准变更</a>，<a href="https://bugs.chromium.org/p/chromium/issues/detail?id=709362" target="_blank" rel="noopener">Chrome bug</a>）（未验证）。</li></ul><h2 id="BFC的特性"><a href="#BFC的特性" class="headerlink" title="BFC的特性"></a>BFC的特性</h2><ul><li>BFC内部的块级盒会在垂直方向上一个接一个排列。（普通流）</li><li>计算BFC的高度时，浮动元素也会参与计算。</li><li>同一BFC下的相邻块级元素可能发生外边距折叠。(float可以避免外边距折叠 或者 打破同一BFC的结构)</li><li>BFC元素不会和它的子元素发生外边距折叠。</li><li>浮动盒的区域不会和BFC重叠。</li><li>BFC是一个独立的容器外面的元素不会影响BFC内部反之亦然。</li></ul><h2 id="BFC的作用"><a href="#BFC的作用" class="headerlink" title="BFC的作用"></a>BFC的作用</h2><h3 id="清除内部浮动"><a href="#清除内部浮动" class="headerlink" title="清除内部浮动"></a>清除内部浮动</h3><p>我们在布局时经常会遇到这个问题：对子元素设置浮动后，父元素会发生高度塌陷，可能出现子元素溢出父元素。例如：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="built_in">rgb</span>(<span class="number">224</span>, <span class="number">206</span>, <span class="number">247</span>);</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">5px</span> solid green;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.float</span> &#123;</span><br><span class="line">    <span class="attribute">float</span>: left;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">50px</span>;</span><br><span class="line">    <span class="attribute">border</span>:<span class="number">1px</span> solid black;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"float"</span>&gt;</span>I am a floated box!<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>上面代码的显示效果为：</p><p><img src="https://ftp.bmp.ovh/imgs/2020/10/de7b28122790a2d2.png" alt=""></p><p>解决这个问题，只需要把父元素变成一个BFC就行了。常用的办法是给父元素的overflow设置一个不是visible的值，可以是hidden、auto、scroll。父元素就会被撑开。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="built_in">rgb</span>(<span class="number">224</span>, <span class="number">206</span>, <span class="number">247</span>);</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">5px</span> solid green;</span><br><span class="line">    <span class="attribute">overflow</span>: hidden;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://ftp.bmp.ovh/imgs/2020/10/fd0909d62441d1f2.png" alt=""></p><p>另一种方法是设置父元素的<code>display</code> 为 <code>flow-root</code>,一个新的 <code>display</code> 属性的值（所以请注意兼容性问题），它可以创建无副作用的 BFC。关于值 <code>flow-root</code>的这个名字，当你明白你实际上是在创建一个行为类似于根元素 （浏览器中的<code>&lt;html&gt;</code>元素） 的东西时，就能发现这个名字的意义了——即创建一个上下文，里面将进行 flow layout。</p><h3 id="消除边距折叠"><a href="#消除边距折叠" class="headerlink" title="消除边距折叠"></a>消除边距折叠</h3><h4 id="什么是边距折叠"><a href="#什么是边距折叠" class="headerlink" title="什么是边距折叠"></a>什么是边距折叠</h4><p>块的上外边距(margin-top)和下外边距(margin-bottom)有时合并(折叠)为单个边距，其大小为单个边距的最大值(或如果它们相等，则仅为其中一个)，这种行为称为<strong>边距折叠</strong>。</p><blockquote><p>注意有设定 float 和 position=absolute 的元素不会产生外边距重叠行为。</p></blockquote><p>有三种情况会形成外边距重叠：</p><ul><li><p>1.相邻的两个元素之间的外边距重叠，除非后一个元素加上<a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/clear" target="_blank" rel="noopener">clear-fix清除浮动</a>。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span>   </span><br><span class="line"><span class="css"><span class="selector-tag">p</span><span class="selector-pseudo">:nth-child(1)</span>&#123;   </span></span><br><span class="line">  margin-bottom: 13px; </span><br><span class="line">&#125;   </span><br><span class="line"><span class="css"><span class="selector-tag">p</span><span class="selector-pseudo">:nth-child(2)</span>&#123;  </span></span><br><span class="line">  margin-top: 87px;  </span><br><span class="line">&#125; </span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>下边界范围会...<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>...会跟这个元素的上边界范围重叠。<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure><p>这个例子如果以为边界会合并的话，理所当然会猜测上下2个元素会合并一个100px的边界范围，但其实会发生边界折叠，只会挑选最大边界范围留下，所以这个例子的边界范围其实是87px。</p></li></ul><ul><li><p>2.没有内容将父元素和后代元素分开</p><p> 如果没有边框border，内边距padding，行内内容，也没有创建块级格式上下文或清除浮动来分开一个块级元素的上边界margin-top 与其内一个或多个后代块级元素的上边界margin-top；或没有边框，内边距，行内内容，高度height，最小高度min-height或 最大高度max-height 来分开一个块级元素的下边界margin-bottom与其内的一个或多个后代后代块元素的下边界margin-bottom，则就会出现父块元素和其内后代块元素外边界重叠，重叠部分最终会溢出到父级块元素外面。 </p></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">"text/css"</span>&gt;</span></span><br><span class="line">    section    &#123;</span><br><span class="line">        margin-top: 13px;</span><br><span class="line">        margin-bottom: 87px;</span><br><span class="line">    &#125;</span><br><span class="line">    header &#123;</span><br><span class="line">        margin-top: 87px;</span><br><span class="line">    &#125;</span><br><span class="line">    footer &#123;</span><br><span class="line">        margin-bottom: 13px;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">section</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">header</span>&gt;</span>上边界重叠 87<span class="tag">&lt;/<span class="name">header</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">main</span>&gt;</span><span class="tag">&lt;/<span class="name">main</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">footer</span>&gt;</span>下边界重叠 87 不能再高了<span class="tag">&lt;/<span class="name">footer</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">section</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li><p>3.空的块级元素</p><p>当一个块元素上边界margin-top 直接贴到元素下边界margin-bottom时也会发生边界折叠。这种情况会发生在一个块元素完全没有设定边框border、内边距paddng、高度height、最小高度min-height 、最大高度max-height 、内容设定为inline或是加上clear-fix的时候。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">p &#123;</span><br><span class="line">  margin: 0;  </span><br><span class="line">&#125;</span><br><span class="line">div &#123;</span><br><span class="line">  margin-top: 13px;</span><br><span class="line">  margin-bottom: 87px;</span><br><span class="line">&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>上边界范围是 87 ...<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>... 上边界范围是 87<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><p>一些需要注意的地方：</p><ul><li>上述情况的组合会产生更复杂的外边距折叠。</li><li>即使某一外边距为0，这些规则仍然适用。因此就算父元素的外边距是0，第一个或最后一个子元素的外边距仍然会“溢出”到父元素的外面。</li><li>如果参与折叠的外边距中包含负值，折叠后的外边距的值为最大的正边距与最小的负边距（即绝对值最大的负边距）的和,；也就是说如果有-13px 8px 100px叠在一起，边界范围的技术就是 100px -13px的87px。</li><li>如果所有参与折叠的外边距都为负，折叠后的外边距的值为最小的负边距的值。这一规则适用于相邻元素和嵌套元素。</li></ul><h4 id="怎么消除边距折叠？"><a href="#怎么消除边距折叠？" class="headerlink" title="怎么消除边距折叠？"></a>怎么消除边距折叠？</h4><p>对于上面的情况，只需要给他们的父元素创建一个BFC就能消除。</p><h3 id="创建两边固定中间自适应布局"><a href="#创建两边固定中间自适应布局" class="headerlink" title="创建两边固定中间自适应布局"></a>创建两边固定中间自适应布局</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css"><span class="selector-class">.wrap</span>&#123;</span></span><br><span class="line">  border: 10px pink solid;</span><br><span class="line">  overflow: hidden;</span><br><span class="line">&#125;</span><br><span class="line"><span class="css"><span class="selector-class">.box1</span>&#123;</span></span><br><span class="line">  width: 100px;</span><br><span class="line">  height: 100px;</span><br><span class="line">  background: red;</span><br><span class="line">  float: left;</span><br><span class="line">&#125;</span><br><span class="line"><span class="css"><span class="selector-class">.box2</span>&#123;</span></span><br><span class="line">  width: 200px;</span><br><span class="line">  height: 100px;</span><br><span class="line">  background: blue;</span><br><span class="line">  float: right;</span><br><span class="line">&#125;</span><br><span class="line"><span class="css"><span class="selector-class">.box3</span>&#123;</span></span><br><span class="line">  height: 100px;</span><br><span class="line">  background: green;</span><br><span class="line">  overflow: hidden;</span><br><span class="line">&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"wrap"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box1"</span>&gt;</span>left<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box2"</span>&gt;</span>right<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box3"</span>&gt;</span>main<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>根据 “浮动盒的区域不会和BFC重叠” 特性，两边的元素浮动，中间的元素开启BFC，很容易就实现了两边固定中间自适应布局。</p><p>两边元素浮动就脱离了普通文档流，在普通文档流空出来的位置会被box3填满，这个时候box1、box2是叠在box3上面的，当给box3开启了BFC因为“浮动盒的区域不会和BFC重叠特性”box3只占中间剩余位置。</p><p><img src="https://ftp.bmp.ovh/imgs/2020/10/c0aa531ccc0e95da.png" alt=""></p><h2 id="IFC、FFC、GFC"><a href="#IFC、FFC、GFC" class="headerlink" title="IFC、FFC、GFC"></a>IFC、FFC、GFC</h2><h3 id="IFC"><a href="#IFC" class="headerlink" title="IFC"></a>IFC</h3><p>如何创建一个IFC布局：</p><ul><li>行内块元素（元素的 display 为 inline-block）</li></ul><p>IFC的特性</p><ul><li>在行内格式化上下文中，盒(box)一个接一个地水平排列，起点是包含块的顶部</li><li>水平方向上的 margin，border 和 padding在盒之间得到保留</li><li>盒在垂直方向上可以以不同的方式对齐</li></ul><h3 id="FFC"><a href="#FFC" class="headerlink" title="FFC"></a>FFC</h3><p>如何创建一个FFC布局：</p><ul><li>弹性元素（display 为 flex 或 inline-flex）</li></ul><h3 id="GFC"><a href="#GFC" class="headerlink" title="GFC"></a>GFC</h3><p>如何创建一个GFC布局：</p><ul><li>网格元素（display 为 grid 或 inline-grid）</li></ul>]]></content>
      
      
      <categories>
          
          <category> CSS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CSS </tag>
            
            <tag> BFC </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CSS 盒模型详解 + 定位规则</title>
      <link href="/front-end/CSS_Box_Model/"/>
      <url>/front-end/CSS_Box_Model/</url>
      
        <content type="html"><![CDATA[<p>浏览器的渲染引擎会根据标准之一的 CSS 基础框盒模型（CSS basic box model）对html文档进行渲染，将所有元素表示为一个个矩形的盒子（box）。CSS 决定这些盒子的大小、位置以及属性（例如颜色、背景、边框尺寸…）。</p><a id="more"></a><h2 id="盒模型"><a href="#盒模型" class="headerlink" title="盒模型"></a>盒模型</h2><p>所有HTML元素可以看作盒子，在CSS中，”box model”这一术语是用来设计和布局时使用。CSS盒模型本质上是一个盒子，包括 内容区域(content)、内边距区域(padding)、边框区域(border)、外边距区域(margin)。</p><ul><li><strong>内容区域</strong> 由内容边界限制，容纳着元素的“真实”内容，例如文本、图像，或是一个视频播放器。如果 <code>box-sizing</code> 为 <code>content-box</code>（默认），则内容区域的大小可明确地通过 <code>width</code>、<code>min-width</code>、<code>max-width</code>、<code>height</code>、<code>min-height</code> 和 <code>max-height</code> 控制。</li><li>*<em>内边距区域 *</em> 由内边距边界限制，扩展自内容区域，负责延伸内容区域的背景，填充元素中内容与边框的间距。内边距的粗细可以由 <code>padding-top</code>、<code>padding-right</code>、<code>padding-bottom</code>、<code>padding-left</code>，和简写属性 <a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/padding" target="_blank" rel="noopener"><code>padding</code></a> 控制。</li><li><strong>边框区域</strong> 由边框边界限制，扩展自内边距区域，是容纳边框的区域。边框的粗细由 <code>border-width</code>和简写的 <a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/border" target="_blank" rel="noopener"><code>border</code></a> 属性控制。如果 <a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/box-sizing" target="_blank" rel="noopener"><code>box-sizing</code></a> 属性被设为 <code>border-box</code>，那么边框区域的大小可明确地通过 <code>width</code>、<code>min-width</code>, <code>max-width</code>、<code>height</code>、<code>min-height</code>，和 <code>max-height</code> 属性控制。假如框盒上设有背景（<code>background-color</code>或 <code>background-image</code>），背景将会一直延伸至边框的外沿（默认为在边框下层延伸，边框会盖在背景上）。此默认表现可通过 CSS 属性 <a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/background-clip" target="_blank" rel="noopener"><code>background-clip</code></a> 来改变。</li><li><strong>外边距区域</strong> 由外边距边界限制，用空白区域扩展边框区域，以分开相邻的元素。外边距区域的大小由 <code>margin-top</code>、<code>margin-right</code>、<code>margin-bottom</code>、<code>margin-left</code>，和简写属性 <a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/margin" target="_blank" rel="noopener"><code>margin</code></a> 控制。在发生<a href="https://developer.mozilla.org/en/CSS/margin_collapsing" target="_blank" rel="noopener">外边距合并</a>的情况下，由于盒之间共享外边距，外边距不容易弄清楚。</li></ul><p>盒模型又分为 <strong>标准盒模型</strong> 和 <strong>怪异盒模型</strong></p><h3 id="标准盒模型"><a href="#标准盒模型" class="headerlink" title="标准盒模型"></a>标准盒模型</h3><p>标准盒模型是W3C的标准，<code>box-sizing</code> 为 <code>content-box</code>，这是默认值，盒子的<code>width</code>等于<code>content</code>的宽度。</p><h3 id="怪异盒模型"><a href="#怪异盒模型" class="headerlink" title="怪异盒模型"></a>怪异盒模型</h3><p>怪异盒模型又叫做ie盒模型，它是ie的标准，<code>box-sizing</code> 为 <code>border-box</code>， 盒子的<code>width</code>等于<code>content + padding + border</code>的宽度。</p><h2 id="视觉格式化模型"><a href="#视觉格式化模型" class="headerlink" title="视觉格式化模型"></a>视觉格式化模型</h2><p>CSS 视觉格式化模型（visual formatting model）是用来处理和在视觉媒体上显示文档时使用的计算规则。</p><p>视觉格式化模型会根据<a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/CSS_Box_Model/Introduction_to_the_CSS_box_model" target="_blank" rel="noopener">CSS盒子模型</a>将文档中的元素转换为一个个盒子，每个盒子的布局由以下因素决定：</p><ul><li>盒子的尺寸：精确指定、由约束条件指定或没有指定</li><li>盒子的类型：行内盒子（inline）、行内级盒子（inline-level）、原子行内级盒子（atomic inline-level）、块盒子（block）</li><li><a href="https://developer.mozilla.org/zh-CN/docs/CSS/Box_positioning_scheme" target="_blank" rel="noopener">定位方案（positioning scheme）</a>：普通流定位、浮动定位或绝对定位</li><li>文档树中的其它元素：即当前盒子的子元素或兄弟元素</li><li><a href="https://developer.mozilla.org/en-US/docs/Glossary/viewport" target="_blank" rel="noopener">视口</a>尺寸与位置</li><li>所包含的图片的尺寸</li><li>其他的某些外部因素</li></ul><p>该模型会根据盒子的边界来渲染盒子，通常盒子会创建一个包含其子元素的包含块，但是子元素并不由包含块所限制，当子元素跑到包含块的外面时称为溢出（<a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/overflow" target="_blank" rel="noopener">overflow</a>）。</p><p>盒子的生成是 CSS 视觉格式化模型的一部分，用于从文档元素生成盒子。盒子有不同的类型，盒子的类型取决于 display 属性。</p><blockquote><p>下面是一些基础概念</p></blockquote><ul><li><strong>块</strong>：block，一个抽象的概念，一个块在文档流上占据一个独立的区域，块与块之间在垂直方向上按照顺序依次堆叠。</li><li><strong>包含块</strong>：containing block，包含其他盒子的块称为包含块。</li><li><strong>盒子</strong>：box，一个抽象的概念，由CSS引擎根据文档中的内容所创建，主要用于文档元素的定位、布局和格式化等用途。盒子与元素并不是一一对应的，有时多个元素会合并生成一个盒子，有时一个元素会生成多个盒子（如匿名盒子）。</li><li><strong>块级元素</strong>：block-level element，元素的 <code>display</code> 为 <code>block</code>、<code>list-item</code>、<code>table</code> 时，该元素将成为块级元素。元素是否是块级元素仅是元素本身的属性，并不直接用于格式化上下文的创建或布局。</li><li><strong>块级盒子</strong>：block-level box，由块级元素生成。一个块级元素至少会生成一个块级盒子，但也有可能生成多个（例如列表项元素）。</li><li><strong>块盒子</strong>：block box，如果一个块级盒子同时也是一个块容器盒子（见下），则称其为块盒子。除具名块盒子之外，还有一类块盒子是匿名的，称为匿名块盒子（Anonymous block box），匿名盒子无法被CSS选择符选中。</li><li><strong>块容器盒子</strong>：block container box或block containing box，块容器盒子侧重于当前盒子作为“容器”的这一角色，它不参与当前块的布局和定位，它所描述的仅仅是当前盒子与其后代之间的关系。换句话说，块容器盒子主要用于确定其子元素的定位、布局等。</li></ul><p>注意：盒子分为“块盒子”和“块级盒子”两种，但元素只有“块级元素”，而没有“块元素”。下面的“行内级元素”也是一样。</p><ul><li><strong>行内级元素</strong>：inline-level element，<code>display</code> 为 <code>inline</code>、<code>inline-block</code>、<code>inline-table</code> 的元素称为行内级元素。与块级元素一样，元素是否是行内级元素仅是元素本身的属性，并不直接用于格式化上下文的创建或布局。</li><li><strong>行内级盒子</strong>：inline-level box，由行内级元素生成。行内级盒子包括行内盒子和原子行内级盒子两种，区别在于该盒子是否参与行内格式化上下文的创建。</li><li><strong>行内盒子</strong>：inline box，参与行内格式化上下文创建的行内级盒子称为行内盒子。与块盒子类似，行内盒子也分为具名行内盒子和匿名行内盒子（anonymous inline box）两种。</li><li><strong>原子行内级盒子</strong>：atomic inline-level box，不参与行内格式化上下文创建的行内级盒子。原子行内级盒子一开始叫做原子行内盒子（atomic inline box），后被修正。原子行内级盒子的内容不会拆分成多行显示。</li></ul><h3 id="块盒子"><a href="#块盒子" class="headerlink" title="块盒子"></a>块盒子</h3><p>当元素的 <a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/display" target="_blank" rel="noopener"><code>display</code></a> 为 <code>block</code>、<code>list-item</code> 或 <code>table</code> 时，该元素将成为块级元素。一个块级元素会被格式化成一个块（例如文章的一个段落），默认按照垂直方向依次排列。</p><p>每个块级盒子都会参与<a href="https://developer.mozilla.org/en-US/docs/CSS/block_formatting_context" target="_blank" rel="noopener">BFC 块格式化上下文（block formatting context）</a>的创建，而每个块级元素都会至少生成一个块级盒子，即主块级盒子（<em>principal block-level</em> <em>box）。有</em>一些元素，比如列表项会生成额外的盒子来放置项目符号，而那些会生成列表项的元素可能会生成更多的盒子。不过，多数元素只生成一个主块级盒子。 </p><p>主块级盒子包含由后代元素生成的盒子以及内容，同时它也会参与<a href="https://developer.mozilla.org/zh-CN/docs/CSS/Positioning_scheme" target="_blank" rel="noopener">定位方案</a>。</p><p>一个块级盒子可能也是一个块容器盒子。块容器盒子（<em>block container box</em>）要么只包含其它块级盒子，要么只包含行内盒子并同时创建一个行内<a href="https://developer.mozilla.org/en-US/docs/CSS/Inline_formatting_context" target="_blank" rel="noopener">IFC 格式化上下文（inline formatting context）</a>。</p><p>块级盒子与块容器盒子的不同点是前者描述了元素与其父元素和兄弟元素之间的行为，而后者描述了元素跟其后代之间的行为。有些块级盒子并不是块容器盒子，比如表格；而有些块容器盒子也不是块级盒子，比如非替换行内块和非替换表格单元格。</p><p>一个同时是块容器盒子的块级盒子称为块盒子（<em>block box</em>）。</p><h3 id="匿名块盒子"><a href="#匿名块盒子" class="headerlink" title="匿名块盒子"></a>匿名块盒子</h3><p>在某些情况下进行视觉格式化时，需要添加一些增补性的盒子，这些盒子不能用CSS选择符选中，因此称为匿名盒子（<em>anonymous boxes）</em>。</p><p>CSS选择器不能作用于匿名盒子(<em>anonymous boxes</em>)，所以它不能被样式表赋予样式。也就是说，此时所有可继承的 CSS 属性值都为 <code>inherit</code> ，而所有不可继承的 CSS 属性值都为 <code>initial</code>。</p><p>块包含盒子可能只包含行内级盒子，也可能只包含块级盒子，但通常的文档都会同时包含两者，在这种情况下，就会在相邻的行内级盒子外创建匿名块盒子。</p><p>考虑下面的HTML代码，假设<code>&lt;div&gt;</code>和<code>&lt;p&gt;</code>都保持默认的样式（即它们的 <code>display</code> 为 <code>block</code>）：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span>Some inline text <span class="tag">&lt;<span class="name">p</span>&gt;</span>followed by a paragraph<span class="tag">&lt;/<span class="name">p</span>&gt;</span> followed by more inline text.<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>此时会产生两个匿名块盒子：一个是 <code>&lt;p&gt;</code> 元素前面的那些文本（<code>Some inline text</code>），另一个是 <code>&lt;p&gt;</code> 元素后面的文本（<code>followed by more inline text.</code>）。此时会生成下面的块结构：</p><p><img src="https://ftp.bmp.ovh/imgs/2020/10/0ad5d2bce24a6aa5.png" alt=""></p><p>显示为：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Some inline text</span><br><span class="line">followed by a paragraph</span><br><span class="line">followed by more inline text.</span><br></pre></td></tr></table></figure><p>对这两个匿名盒子来说，程序员无法像<code>&lt;p&gt;</code>元素那样控制它们的样式，因此它们会<code>&lt;div&gt;</code>从那里继承那些可继承的属性，如 <code>color</code>。其他不可继承的属性则会设置为 <code>initial</code>，比如，因为没有为它们指定 <code>background-color</code>，因此其具有默认的透明背景，而 <code>&lt;p&gt;</code> 元素的盒子则能够用CSS指定背景颜色。类似地，两个匿名盒子的文本颜色总是一样的。</p><p>另一种会创建匿名块盒子的情况是一个行内盒子中包含一或多个块盒子。此时，包含块盒子的盒子会拆分为两个行内盒子，分别位于块盒子的前面和后面。块盒子前面的所有行内盒子会被一个匿名块盒子包裹，块盒子后面的行内盒子也是一样。因此，块盒子将成为这两个匿名块盒子的兄弟盒子。</p><p>如果有多个块盒子，而它们中间又没有行内元素，则会在这些盒子的前面和后面创建两个匿名块盒子。</p><p>考虑下面的HTML代码，假设<code>&lt;p&gt;</code>的 <code>display</code> 为 <code>inline</code>，<code>&lt;span&gt;</code>的 <code>display</code> 为 <code>block</code>：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>Some <span class="tag">&lt;<span class="name">em</span>&gt;</span>inline<span class="tag">&lt;/<span class="name">em</span>&gt;</span> text <span class="tag">&lt;<span class="name">span</span>&gt;</span>followed by a paragraph<span class="tag">&lt;/<span class="name">span</span>&gt;</span> followed by more inline text.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure><p>此时会产生两个匿名块盒子：一个是 <code>&lt;span&gt;</code> 元素前面的文本（<code>Some *inline* text</code>），另一个是其之后的文本（<code>followed by more inline text.</code>）。此时会生成下面的块结构：</p><p><img src="https://ftp.bmp.ovh/imgs/2020/10/53ea34782afd9adf.png" alt=""></p><p>显示为：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Some inline text</span><br><span class="line">followed by a paragraph</span><br><span class="line">followed by more inline text.</span><br></pre></td></tr></table></figure><h3 id="行内盒子"><a href="#行内盒子" class="headerlink" title="行内盒子"></a>行内盒子</h3><p>如果一个元素的 <code>display</code> 属性为 <code>inline</code>、<code>inline-block</code> 或 <code>inline-table</code>，则称该元素为行内级元素。显示时，它不会生成内容块，但是可以与其他行内级内容一起显示为多行。一个典型的例子是包含多种格式内容（如强调文本、图片等）的段落，就可以由行内级元素组成。</p><p>行内级元素会生成行内级盒子，该盒子同时会参与行内格式化上下文（<a href="https://developer.mozilla.org/zh-CN/docs/CSS/Inline_formatting_context" target="_blank" rel="noopener">inline formatting context</a>）的创建。行内盒子既是行内级盒子，也是一个其内容会参与创建其容器的行内格式化上下文的盒子，比如所有具有 <code>display:inline</code> 样式的非替换盒子。如果一个行内级盒子的内容不参与行内格式化上下文的创建，则称其为原子行内级盒子。而通过替换行内级元素或 <code>display</code> 值为 <code>inline-block</code> 或 <code>inline-table</code> 的元素创建的盒子不会像行内盒子一样可以被拆分为多个盒子。</p><p>在同一个行内格式化上下文中，原子行内级盒子不能拆分成多行, 例如：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">  span &#123;</span><br><span class="line"><span class="css">    <span class="selector-tag">display</span><span class="selector-pseudo">:inline</span>; <span class="comment">/* default value*/</span></span></span><br><span class="line">  &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">"width:20em;"</span>&gt;</span></span><br><span class="line">   The text in the span <span class="tag">&lt;<span class="name">span</span>&gt;</span>can be split in several</span><br><span class="line">   lines as it<span class="tag">&lt;/<span class="name">span</span>&gt;</span> is an inline box.</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>上述代码可能显示为：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">The text in the span can be split into several</span><br><span class="line">lines as it is an inline box.</span><br></pre></td></tr></table></figure><p>而</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">  span &#123;</span><br><span class="line"><span class="css">    <span class="selector-tag">display</span><span class="selector-pseudo">:inline-block</span>;</span></span><br><span class="line">  &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">"width:20em;"</span>&gt;</span></span><br><span class="line">   The text in the span <span class="tag">&lt;<span class="name">span</span>&gt;</span>cannot be split in several</span><br><span class="line">   lines as it<span class="tag">&lt;/<span class="name">span</span>&gt;</span> is an inline-block box.</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>则可能显示为：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">The text in the span </span><br><span class="line">cannot be split into several lines as it is an</span><br><span class="line">inline-block box.</span><br></pre></td></tr></table></figure><p>其中的“cannot be split into several lines as it”永远不会换行。</p><h3 id="匿名行内盒子"><a href="#匿名行内盒子" class="headerlink" title="匿名行内盒子"></a>匿名行内盒子</h3><p>类似于块盒子，CSS引擎有时候也会自动创建一些行内盒子。这些行内盒子无法被选择符选中，因此是匿名的，它们从父元素那里继承那些可继承的属性，其他属性保持默认值 <code>initial</code>。</p><p>一种常见的情况是CSS引擎会自动为直接包含在块盒子中的文本创建一个行内格式化上下文，在这种情况下，这些文本会被一个足够大的匿名行内盒子所包含。但是如果仅包含空格则有可能不会生成匿名行内盒子，因为空格有可能会由于 <a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/white-space" target="_blank" rel="noopener"><code>white-space</code></a> 的设置而被移除，从而导致最终的实际内容为空。</p><h3 id="其他类型盒子"><a href="#其他类型盒子" class="headerlink" title="其他类型盒子"></a>其他类型盒子</h3><p>还有其他类型的盒子例如：行盒子、Run-in盒子、表格包装器盒子、表格盒子、表格标题盒子、列盒子等等</p><h2 id="定位规则"><a href="#定位规则" class="headerlink" title="定位规则"></a>定位规则</h2><p>一旦生成了盒子以后，CSS引擎就需要定位它们以完成布局。下面是定位盒子时所使用的规则：</p><ul><li>普通流：按照次序依次定位每个盒子</li><li>浮动：将盒子从普通流中单独拎出来，将其放到外层盒子的某一边</li><li>绝对定位：按照绝对位置来定位盒子，其位置根据盒子的包含元素所建立的绝对坐标系来计算，因此绝对定位元素有可能会覆盖其他元素</li></ul><h3 id="普通流"><a href="#普通流" class="headerlink" title="普通流"></a>普通流</h3><p>在普通流中，盒子会依次放置。在块格式化上下文中，盒子在垂直方向依次排列；而在行内格式化上下文中，盒子则水平排列。当CSS的 <a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/position" target="_blank" rel="noopener"><code>position</code></a> 属性为 <code>static</code> 或 <code>relative</code>，并且 <a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/float" target="_blank" rel="noopener"><code>float</code></a> 为 <code>none</code> 时，其布局方式为普通流。</p><h3 id="浮动"><a href="#浮动" class="headerlink" title="浮动"></a>浮动</h3><p>在浮动定位中，浮动盒子会浮动到当前行的开始或尾部位置。这会导致普通流中的文本及其他内容会“流”到浮动盒子的边缘处，除非元素通过 <a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/clear" target="_blank" rel="noopener"><code>clear</code></a> 清除了前面的浮动。</p><p>一个盒子的 <a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/float" target="_blank" rel="noopener"><code>float</code></a> 值不为 <code>none</code>，并且其 <a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/position" target="_blank" rel="noopener"><code>position</code></a> 为 <code>static</code> 或 <code>relative</code> 时，该盒子为浮动定位。如果将 <a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/float" target="_blank" rel="noopener"><code>float</code></a> 设置为 <code>left</code>，浮动盒子会定位到当前行盒子的开始位置（左侧），如果设置为 <code>right</code>，浮动盒子会定位到当前行盒子的尾部位置（右侧）。不管是左浮动还是右浮动，行盒子都会伸缩以适应浮动盒子的大小。</p><h3 id="绝对定位"><a href="#绝对定位" class="headerlink" title="绝对定位"></a>绝对定位</h3><p>在绝对定位中，盒子会完全从当前流中移除，并且不会再与其有任何联系（此处仅指定位和位置计算，而绝对定位的元素在文档树中仍然与其他元素有父子或兄弟等关系），其位置会使用 <a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/top" target="_blank" rel="noopener"><code>top</code></a>、<a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/bottom" target="_blank" rel="noopener"><code>bottom</code></a>、<a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/left" target="_blank" rel="noopener"><code>left</code></a> 和 <a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/right" target="_blank" rel="noopener"><code>right</code></a> 相对其<a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/All_About_The_Containing_Block" target="_blank" rel="noopener">包含块</a>进行计算。</p><p>如果元素的 <a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/position" target="_blank" rel="noopener"><code>position</code></a> 为 <code>absolute</code> 或 <code>fixed</code>，该元素为绝对定位。</p><p>对固定位置的元素来说，其包含块为整个视口，该元素相对视口进行绝对定位，因此滚动时元素的位置并不会改变。</p>]]></content>
      
      
      <categories>
          
          <category> CSS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CSS </tag>
            
            <tag> 盒模型 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>解决 Can&#39;t connect to local MySQL server through socket &#39;/var/lib/mysql/mysql.sock&#39; (2）的方法</title>
      <link href="/php/Can&#39;t%20connect%20to%20local%20MySQL/"/>
      <url>/php/Can&#39;t%20connect%20to%20local%20MySQL/</url>
      
        <content type="html"><![CDATA[<p>PHP连接MySQL报错：SQLSTATE[HY000] [2002] Can’t connect to local MySQL server through socket ‘MySQL’ (2)</p><a id="more"></a><h2 id="一-问题发现"><a href="#一-问题发现" class="headerlink" title="一.问题发现"></a>一.问题发现</h2><p>今天在服务器上同时安装了mysql和mariadb，经过一番操作之后，发现原来的php程序不能连接mysql了，每次连接就会提示</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SQLSTATE[HY000] [2002] Can&#39;t connect to local MySQL server through socket &#39;MySQL&#39; (2)</span><br></pre></td></tr></table></figure><p>在网上找了很多解决方法（csdn越来越垃圾了，都是千篇一律的复制粘贴，没有真正解决问题的），么有找到方法，在google找了几个解决方法，经过测试可以使用，并明白了原理。</p><h2 id="二-问题解析"><a href="#二-问题解析" class="headerlink" title="二.问题解析"></a>二.问题解析</h2><p>如果提示这个错误，如果将连接参数中的localhost换成 <code>127.0.0.1</code>就能正常使用，这是为什么呢？<br>这是因为使用localhost是通过套接字(socket)通讯，而<code>127.0.0.1</code>是通过tcp/ip协议通讯，而mysql的报错就是没有找到这个套接字文件(mysql.sock)，<br>一般出现这种情况是因为（个人总结，可能还有其他原因，欢迎补充）</p><ul><li>有些安装mysql的方法没有将此文件放在了其他位置,php连接mysql时没有找到这个文件</li><li>php没有访问这个文件的权限</li><li>这个文件被删除了</li></ul><h2 id="三-问题解决"><a href="#三-问题解决" class="headerlink" title="三.问题解决"></a>三.问题解决</h2><p>找到问题了，现在就要解决问题<br>首先既然php找不到这个文件，那我们先全局找一下这个文件在哪儿</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo find / -name mysql.sock</span><br></pre></td></tr></table></figure><p>如果没找到这个文件，尝试搜索一下 mysqld.sock</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo find / -name mysqld.sock</span><br></pre></td></tr></table></figure><p>找到以上两个文件的任一文件，首先记一下文件的绝对路径， 我这边找到的是 <code>/usr/local/mysql/data/mysqld.sock</code></p><blockquote><p>如果没有找到，需要自己从其他地方复制一份，这个需要自己去搜索解决方法</p></blockquote><p>我找到了两种解决方法</p><h3 id="1-修改php-ini"><a href="#1-修改php-ini" class="headerlink" title="1.修改php.ini"></a>1.修改php.ini</h3><p>打开php的配置文件, 一般是<code>/etc/php.ini</code>，<br>然后找到<code>[MYSQL]</code>段落，下面有一个<code>mysql.default_socket</code>，将上面记录的socket文件的绝对路径填写到 等号后面。</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">mysql.default_socket</span>= /usr/local/mysql/data/mysqld.sock</span><br></pre></td></tr></table></figure><p>然后再找到<code>[Pdo_mysql]</code>段落，下面有一个<code>pdo_mysql.default_socket</code>，将上面记录的socket文件的绝对路径填写到 等号后面。</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">pdo_mysql.default_socket</span>= /usr/local/mysql/data/mysqld.sock</span><br></pre></td></tr></table></figure><p>修改好之后，保存退出。重启apache或者nginx，必须要重启，不然不生效。<br>再次测试连接mysql，看是否已经正常。</p><h3 id="2-设置软连接（推荐）"><a href="#2-设置软连接（推荐）" class="headerlink" title="2.设置软连接（推荐）"></a>2.设置软连接（推荐）</h3><p>执行命令即可</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo ln -s /usr/<span class="built_in">local</span>/mysql/data/mysqld.sock /var/lib/mysql/mysql.sock</span><br></pre></td></tr></table></figure><p>前一个地址是mysql.sock或mysqld.sock的绝对路径，后一个路径为php没有找到socket文件的路径，我这边是<code>/var/lib/mysql/mysql.sock</code>,执行过命令之后，再次重新连接一下mysql，看是否已经正常。</p>]]></content>
      
      
      <categories>
          
          <category> php </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mysql </tag>
            
            <tag> php </tag>
            
            <tag> mysql.sock </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>TypeScript学习(2)-接口</title>
      <link href="/typescript/typescript-learning-2/"/>
      <url>/typescript/typescript-learning-2/</url>
      
        <content type="html"><![CDATA[<blockquote><p>搬运<a href="https://www.tslang.cn/docs/handbook/interfaces.html" target="_blank" rel="noopener">TypeScript中文网 - 接口</a><br>为了方便，无特殊说明，以下的<code>js</code>表示 JavaScript，<code>ts</code>表示TypeScript</p></blockquote><a id="more"></a><h3 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h3><p>TypeScript的核心原则之一是对值所具有的结构进行类型检查。 它有时被称做“鸭式辨型法”或“结构性子类型化”。 在TypeScript里，接口的作用就是为这些类型命名和为你的代码或第三方代码定义契约。</p><h3 id="简单接口示例"><a href="#简单接口示例" class="headerlink" title="简单接口示例"></a>简单接口示例</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> LabelledValue &#123;</span><br><span class="line">  label: <span class="built_in">string</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">printLabel</span>(<span class="params">labelledObj: LabelledValue</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(labelledObj.label);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> myObj = &#123;size: <span class="number">10</span>, label: <span class="string">"Size 10 Object"</span>&#125;;</span><br><span class="line">printLabel(myObj);</span><br></pre></td></tr></table></figure><h3 id="可选属性"><a href="#可选属性" class="headerlink" title="可选属性"></a>可选属性</h3><p>接口里的属性不全都是必需的。 有些是只在某些条件下存在，或者根本不存在。 可选属性在应用<code>option bags</code>模式时很常用，即给函数传入的参数对象中只有部分属性赋值了</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> SquareConfig &#123;</span><br><span class="line">  color?: <span class="built_in">string</span>;</span><br><span class="line">  width?: <span class="built_in">number</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>带有可选属性的接口与普通的接口定义差不多，只是在可选属性名字定义的后面加一个?符号。</p><h3 id="只读属性"><a href="#只读属性" class="headerlink" title="只读属性"></a>只读属性</h3><p>一些对象属性只能在对象刚刚创建的时候修改其值。 你可以在属性名前用 readonly来指定只读属性:</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> Point &#123;</span><br><span class="line">  readonly x: <span class="built_in">number</span>;</span><br><span class="line">  readonly y: <span class="built_in">number</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>你可以通过赋值一个对象字面量来构造一个Point。 赋值后， x和y再也不能被改变了。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> p1: Point = &#123; x: <span class="number">10</span>, y: <span class="number">20</span> &#125;;</span><br><span class="line">p1.x = <span class="number">5</span>; <span class="comment">// error!</span></span><br></pre></td></tr></table></figure><p>TypeScript具有<code>ReadonlyArray&lt;T&gt;</code>类型，它与<code>Array&lt;T&gt;</code>相似，只是把所有可变方法去掉了，因此可以确保数组创建后再也不能被修改：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> a: <span class="built_in">number</span>[] = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>];</span><br><span class="line"><span class="keyword">let</span> ro: ReadonlyArray&lt;<span class="built_in">number</span>&gt; = a;</span><br><span class="line">ro[<span class="number">0</span>] = <span class="number">12</span>; <span class="comment">// error!</span></span><br><span class="line">ro.push(<span class="number">5</span>); <span class="comment">// error!</span></span><br><span class="line">ro.length = <span class="number">100</span>; <span class="comment">// error!</span></span><br><span class="line">a = ro; <span class="comment">// error!</span></span><br></pre></td></tr></table></figure><p>上面代码的最后一行，可以看到就算把整个<code>ReadonlyArray</code>赋值到一个普通数组也是不可以的。 但是你可以用类型断言重写：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">a = ro <span class="keyword">as</span> <span class="built_in">number</span>[];</span><br></pre></td></tr></table></figure><p><strong>readonly</strong> vs <strong>const</strong><br>最简单判断该用<code>readonly</code>还是<code>const</code>的方法是看要把它做为变量使用还是做为一个属性。 做为变量使用的话用 <code>const</code>，若做为属性则使用<code>readonly</code></p><h3 id="额外的属性检查"><a href="#额外的属性检查" class="headerlink" title="额外的属性检查"></a>额外的属性检查</h3><p>参考下一个例子：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> SquareConfig &#123;</span><br><span class="line">    color?: <span class="built_in">string</span>;</span><br><span class="line">    width?: <span class="built_in">number</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createSquare</span>(<span class="params">config: SquareConfig</span>): </span>&#123; color: <span class="built_in">string</span>; area: <span class="built_in">number</span> &#125; &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> mySquare = createSquare(&#123; colour: <span class="string">"red"</span>, width: <span class="number">100</span> &#125;);</span><br></pre></td></tr></table></figure><p>注意传入createSquare的参数拼写为colour而不是color。 在JavaScript里，这会默默地失败。</p><p>你可能会争辩这个程序已经正确地类型化了，因为width属性是兼容的，不存在color属性，而且额外的colour属性是无意义的。</p><p>然而，TypeScript会认为这段代码可能存在bug。 对象字面量会被特殊对待而且会经过 额外属性检查，当将它们赋值给变量或作为参数传递的时候。 如果一个对象字面量存在任何“目标类型”不包含的属性时，你会得到一个错误,<code>error: &#39;colour&#39; not expected in type &#39;SquareConfig&#39;</code>。<br>绕开这些检查非常简单。 最简便的方法是使用类型断言：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> mySquare = createSquare(&#123; width: <span class="number">100</span>, opacity: <span class="number">0.5</span> &#125; <span class="keyword">as</span> SquareConfig);</span><br></pre></td></tr></table></figure><p>然而，最佳的方式是能够添加一个字符串索引签名，前提是你能够确定这个对象可能具有某些做为特殊用途使用的额外属性。 如果 SquareConfig带有上面定义的类型的color和width属性，并且还会带有任意数量的其它属性，那么我们可以这样定义它：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> SquareConfig &#123;</span><br><span class="line">    color?: <span class="built_in">string</span>;</span><br><span class="line">    width?: <span class="built_in">number</span>;</span><br><span class="line">    [propName: <span class="built_in">string</span>]: <span class="built_in">any</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们稍后会讲到索引签名，但在这我们要表示的是SquareConfig可以有任意数量的属性，并且只要它们不是color和width，那么就无所谓它们的类型是什么。<br>还有最后一种跳过这些检查的方式，这可能会让你感到惊讶，它就是将这个对象赋值给一个另一个变量： 因为 squareOptions不会经过额外属性检查，所以编译器不会报错。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> squareOptions = &#123; colour: <span class="string">"red"</span>, width: <span class="number">100</span> &#125;;</span><br><span class="line"><span class="keyword">let</span> mySquare = createSquare(squareOptions);</span><br></pre></td></tr></table></figure><p>要留意，在像上面一样的简单代码里，你可能不应该去绕开这些检查。 对于包含方法和内部状态的复杂对象字面量来讲，你可能需要使用这些技巧，但是大部额外属性检查错误是真正的bug。 就是说你遇到了额外类型检查出的错误，比如“option bags”，你应该去审查一下你的类型声明。 在这里，如果支持传入 color或colour属性到createSquare，你应该修改SquareConfig定义来体现出这一点。</p><h3 id="函数类型"><a href="#函数类型" class="headerlink" title="函数类型"></a>函数类型</h3><p>接口能够描述JavaScript中对象拥有的各种各样的外形。 除了描述带有属性的普通对象外，接口也可以描述函数类型。<br>为了使用接口表示函数类型，我们需要给接口定义一个调用签名。 它就像是一个只有参数列表和返回值类型的函数定义。参数列表里的每个参数都需要名字和类型。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> SearchFunc &#123;</span><br><span class="line">  (source: <span class="built_in">string</span>, subString: <span class="built_in">string</span>): <span class="built_in">boolean</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样定义后，我们可以像使用其它接口一样使用这个函数类型的接口。 下例展示了如何创建一个函数类型的变量，并将一个同类型的函数赋值给这个变量。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> mySearch: SearchFunc;</span><br><span class="line">mySearch = <span class="function"><span class="keyword">function</span>(<span class="params">source: <span class="built_in">string</span>, subString: <span class="built_in">string</span></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> result = source.search(subString);</span><br><span class="line">  <span class="keyword">return</span> result &gt; <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>对于函数类型的类型检查来说，函数的参数名不需要与接口里定义的名字相匹配。 比如，我们使用下面的代码重写上面的例子：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> mySearch: SearchFunc;</span><br><span class="line">mySearch = <span class="function"><span class="keyword">function</span>(<span class="params">src: <span class="built_in">string</span>, sub: <span class="built_in">string</span></span>): <span class="title">boolean</span> </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> result = src.search(sub);</span><br><span class="line">  <span class="keyword">return</span> result &gt; <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>函数的参数会逐个进行检查，要求对应位置上的参数类型是兼容的。 如果你不想指定类型，TypeScript的类型系统会推断出参数类型，因为函数直接赋值给了 SearchFunc类型变量。 函数的返回值类型是通过其返回值推断出来的（此例是 false和true）。 如果让这个函数返回数字或字符串，类型检查器会警告我们函数的返回值类型与 SearchFunc接口中的定义不匹配。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> mySearch: SearchFunc;</span><br><span class="line">mySearch = <span class="function"><span class="keyword">function</span>(<span class="params">src, sub</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> result = src.search(sub);</span><br><span class="line">    <span class="keyword">return</span> result &gt; <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="可索引的类型"><a href="#可索引的类型" class="headerlink" title="可索引的类型"></a>可索引的类型</h3><p>与使用接口描述函数类型差不多，我们也可以描述那些能够“通过索引得到”的类型，比如a[10]或ageMap[“daniel”]。 可索引类型具有一个 索引签名，它描述了对象索引的类型，还有相应的索引返回值类型。 让我们看一个例子：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> StringArray &#123;</span><br><span class="line">  [index: <span class="built_in">number</span>]: <span class="built_in">string</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> myArray: StringArray;</span><br><span class="line">myArray = [<span class="string">"Bob"</span>, <span class="string">"Fred"</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> myStr: <span class="built_in">string</span> = myArray[<span class="number">0</span>];</span><br></pre></td></tr></table></figure><p>上面例子里，我们定义了StringArray接口，它具有索引签名。 这个索引签名表示了当用 number去索引StringArray时会得到string类型的返回值。</p><p>TypeScript支持两种索引签名：字符串和数字。 可以同时使用两种类型的索引，但是数字索引的返回值必须是字符串索引返回值类型的子类型。 这是因为当使用 number来索引时，JavaScript会将它转换成string然后再去索引对象。 也就是说用 100（一个number）去索引等同于使用”100”（一个string）去索引，因此两者需要保持一致</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> Animal &#123;</span><br><span class="line">    name: <span class="built_in">string</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> Dog <span class="keyword">extends</span> Animal &#123;</span><br><span class="line">    breed: <span class="built_in">string</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 错误：使用数值型的字符串索引，有时会得到完全不同的Animal!</span></span><br><span class="line"><span class="keyword">interface</span> NotOkay &#123;</span><br><span class="line">    [x: <span class="built_in">number</span>]: Animal;</span><br><span class="line">    [x: <span class="built_in">string</span>]: Dog;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>字符串索引签名能够很好的描述<code>dictionary</code>模式，并且它们也会确保所有属性与其返回值类型相匹配。 因为字符串索引声明了 <code>obj.property</code>和<code>obj[&quot;property&quot;]</code>两种形式都可以。 下面的例子里， <code>name</code>的类型与字符串索引类型不匹配，所以类型检查器给出一个错误提示：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> NumberDictionary &#123;</span><br><span class="line">  [index: <span class="built_in">string</span>]: <span class="built_in">number</span>;</span><br><span class="line">  length: <span class="built_in">number</span>;    <span class="comment">// 可以，length是number类型</span></span><br><span class="line">  name: <span class="built_in">string</span>       <span class="comment">// 错误，`name`的类型与索引类型返回值的类型不匹配</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最后，你可以将索引签名设置为只读，这样就防止了给索引赋值：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> ReadonlyStringArray &#123;</span><br><span class="line">    readonly [index: <span class="built_in">number</span>]: <span class="built_in">string</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> myArray: ReadonlyStringArray = [<span class="string">"Alice"</span>, <span class="string">"Bob"</span>];</span><br><span class="line">myArray[<span class="number">2</span>] = <span class="string">"Mallory"</span>; <span class="comment">// error!</span></span><br></pre></td></tr></table></figure><p>你不能设置myArray[2]，因为索引签名是只读的。</p><h3 id="类类型"><a href="#类类型" class="headerlink" title="类类型"></a>类类型</h3><h4 id="实现接口"><a href="#实现接口" class="headerlink" title="实现接口"></a>实现接口</h4><p>与C#或Java里接口的基本作用一样，TypeScript也能够用它来明确的强制一个类去符合某种契约。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> ClockInterface &#123;</span><br><span class="line">    currentTime: <span class="built_in">Date</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> Clock <span class="keyword">implements</span> ClockInterface &#123;</span><br><span class="line">    currentTime: <span class="built_in">Date</span>;</span><br><span class="line">    <span class="keyword">constructor</span>(<span class="params">h: <span class="built_in">number</span>, m: <span class="built_in">number</span></span>) &#123; &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>你也可以在接口中描述一个方法，在类里实现它，如同下面的setTime方法一样：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> ClockInterface &#123;</span><br><span class="line">    currentTime: <span class="built_in">Date</span>;</span><br><span class="line">    setTime(d: <span class="built_in">Date</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> Clock <span class="keyword">implements</span> ClockInterface &#123;</span><br><span class="line">    currentTime: <span class="built_in">Date</span>;</span><br><span class="line">    setTime(d: <span class="built_in">Date</span>) &#123;</span><br><span class="line">        <span class="keyword">this</span>.currentTime = d;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">constructor</span>(<span class="params">h: <span class="built_in">number</span>, m: <span class="built_in">number</span></span>) &#123; &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="类静态部分与实例部分的区别"><a href="#类静态部分与实例部分的区别" class="headerlink" title="类静态部分与实例部分的区别"></a>类静态部分与实例部分的区别</h4><p>当你操作类和接口的时候，你要知道类是具有两个类型的：静态部分的类型和实例的类型。 你会注意到，当你用构造器签名去定义一个接口并试图定义一个类去实现这个接口时会得到一个错误：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> ClockConstructor &#123;</span><br><span class="line">    <span class="keyword">new</span> (hour: <span class="built_in">number</span>, minute: <span class="built_in">number</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> Clock <span class="keyword">implements</span> ClockConstructor &#123;</span><br><span class="line">    currentTime: <span class="built_in">Date</span>;</span><br><span class="line">    <span class="keyword">constructor</span>(<span class="params">h: <span class="built_in">number</span>, m: <span class="built_in">number</span></span>) &#123; &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里因为当一个类实现了一个接口时，只对其实例部分进行类型检查。 constructor存在于类的静态部分，所以不在检查的范围内。</p><p>因此，我们应该直接操作类的静态部分。 看下面的例子，我们定义了两个接口， ClockConstructor为构造函数所用和ClockInterface为实例方法所用。 为了方便我们定义一个构造函数 createClock，它用传入的类型创建实例。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> ClockConstructor &#123;</span><br><span class="line">    <span class="keyword">new</span> (hour: <span class="built_in">number</span>, minute: <span class="built_in">number</span>): ClockInterface;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">interface</span> ClockInterface &#123;</span><br><span class="line">    tick();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createClock</span>(<span class="params">ctor: ClockConstructor, hour: <span class="built_in">number</span>, minute: <span class="built_in">number</span></span>): <span class="title">ClockInterface</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> ctor(hour, minute);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> DigitalClock <span class="keyword">implements</span> ClockInterface &#123;</span><br><span class="line">    <span class="keyword">constructor</span>(<span class="params">h: <span class="built_in">number</span>, m: <span class="built_in">number</span></span>) &#123; &#125;</span><br><span class="line">    tick() &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"beep beep"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> AnalogClock <span class="keyword">implements</span> ClockInterface &#123;</span><br><span class="line">    <span class="keyword">constructor</span>(<span class="params">h: <span class="built_in">number</span>, m: <span class="built_in">number</span></span>) &#123; &#125;</span><br><span class="line">    tick() &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"tick tock"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> digital = createClock(DigitalClock, <span class="number">12</span>, <span class="number">17</span>);</span><br><span class="line"><span class="keyword">let</span> analog = createClock(AnalogClock, <span class="number">7</span>, <span class="number">32</span>);</span><br></pre></td></tr></table></figure><p>因为createClock的第一个参数是ClockConstructor类型，在createClock(AnalogClock, 7, 32)里，会检查AnalogClock是否符合构造函数签名。</p><h3 id="继承接口"><a href="#继承接口" class="headerlink" title="继承接口"></a>继承接口</h3><p>和类一样，接口也可以相互继承。 这让我们能够从一个接口里复制成员到另一个接口里，可以更灵活地将接口分割到可重用的模块里。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> Shape &#123;</span><br><span class="line">    color: <span class="built_in">string</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> Square <span class="keyword">extends</span> Shape &#123;</span><br><span class="line">    sideLength: <span class="built_in">number</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> square = &lt;Square&gt;&#123;&#125;;</span><br><span class="line">square.color = <span class="string">"blue"</span>;</span><br><span class="line">square.sideLength = <span class="number">10</span>;</span><br></pre></td></tr></table></figure><p>一个接口可以继承多个接口，创建出多个接口的合成接口。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> Shape &#123;</span><br><span class="line">    color: <span class="built_in">string</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> PenStroke &#123;</span><br><span class="line">    penWidth: <span class="built_in">number</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> Square <span class="keyword">extends</span> Shape, PenStroke &#123;</span><br><span class="line">    sideLength: <span class="built_in">number</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> square = &lt;Square&gt;&#123;&#125;;</span><br><span class="line">square.color = <span class="string">"blue"</span>;</span><br><span class="line">square.sideLength = <span class="number">10</span>;</span><br><span class="line">square.penWidth = <span class="number">5.0</span>;</span><br></pre></td></tr></table></figure><h3 id="混合类型"><a href="#混合类型" class="headerlink" title="混合类型"></a>混合类型</h3><p>先前我们提过，接口能够描述JavaScript里丰富的类型。 因为JavaScript其动态灵活的特点，有时你会希望一个对象可以同时具有上面提到的多种类型。</p><p>一个例子就是，一个对象可以同时做为函数和对象使用，并带有额外的属性。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> Counter &#123;</span><br><span class="line">    (start: <span class="built_in">number</span>): <span class="built_in">string</span>;</span><br><span class="line">    interval: <span class="built_in">number</span>;</span><br><span class="line">    reset(): <span class="built_in">void</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getCounter</span>(<span class="params"></span>): <span class="title">Counter</span> </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> counter = &lt;Counter&gt;<span class="function"><span class="keyword">function</span> (<span class="params">start: <span class="built_in">number</span></span>) </span>&#123; &#125;;</span><br><span class="line">    counter.interval = <span class="number">123</span>;</span><br><span class="line">    counter.reset = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123; &#125;;</span><br><span class="line">    <span class="keyword">return</span> counter;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> c = getCounter();</span><br><span class="line">c(<span class="number">10</span>);</span><br><span class="line">c.reset();</span><br><span class="line">c.interval = <span class="number">5.0</span>;</span><br></pre></td></tr></table></figure><p>在使用JavaScript第三方库的时候，你可能需要像上面那样去完整地定义类型。</p><h3 id="接口继承类"><a href="#接口继承类" class="headerlink" title="接口继承类"></a>接口继承类</h3><p>当接口继承了一个类类型时，它会继承类的成员但不包括其实现。 就好像接口声明了所有类中存在的成员，但并没有提供具体实现一样。 接口同样会继承到类的private和protected成员。 这意味着当你创建了一个接口继承了一个拥有私有或受保护的成员的类时，这个接口类型只能被这个类或其子类所实现（implement）。</p><p>当你有一个庞大的继承结构时这很有用，但要指出的是你的代码只在子类拥有特定属性时起作用。 这个子类除了继承至基类外与基类没有任何关系。 例：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> Control &#123;</span><br><span class="line">    <span class="keyword">private</span> state: <span class="built_in">any</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> SelectableControl <span class="keyword">extends</span> Control &#123;</span><br><span class="line">    select(): <span class="built_in">void</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> Button <span class="keyword">extends</span> Control <span class="keyword">implements</span> SelectableControl &#123;</span><br><span class="line">    select() &#123; &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> TextBox <span class="keyword">extends</span> Control &#123;</span><br><span class="line">    select() &#123; &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 错误：“Image”类型缺少“state”属性。</span></span><br><span class="line"><span class="keyword">class</span> Image <span class="keyword">implements</span> SelectableControl &#123;</span><br><span class="line">    select() &#123; &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> Location &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在上面的例子里，SelectableControl包含了Control的所有成员，包括私有成员state。 因为 state是私有成员，所以只能够是Control的子类们才能实现SelectableControl接口。 因为只有 Control的子类才能够拥有一个声明于Control的私有成员state，这对私有成员的兼容性是必需的。</p><p>在Control类内部，是允许通过SelectableControl的实例来访问私有成员state的。 实际上， SelectableControl接口和拥有select方法的Control类是一样的。 Button和TextBox类是SelectableControl的子类（因为它们都继承自Control并有select方法），但Image和Location类并不是这样的。</p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> TypeScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>推荐几个实用或好玩的js脚本</title>
      <link href="/javascript/Fun-JS-scripts/"/>
      <url>/javascript/Fun-JS-scripts/</url>
      
        <content type="html"><![CDATA[<p>简单的几个脚本,不像TamperMonkey那样强植入, 也无需安装浏览器扩展插件.</p><a id="more"></a><h3 id="脚本列表"><a href="#脚本列表" class="headerlink" title="脚本列表"></a>脚本列表</h3><p><strong>如果未来有新脚本, 会陆续在这里更新.</strong><br><em>具体使用方法在页面底部</em></p><ol><li>解除网页禁止复制的限制（同时去除复制内容末尾自动附加的额外小尾巴信息<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">javascript:<span class="built_in">window</span>.oncontextmenu=<span class="built_in">document</span>.oncontextmenu=<span class="built_in">document</span>.oncopy=<span class="literal">null</span>; [...document.querySelectorAll(<span class="string">'body'</span>)].forEach(<span class="function"><span class="params">dom</span> =&gt;</span> dom.outerHTML = dom.outerHTML); [...document.querySelectorAll(<span class="string">'body, body *'</span>)].forEach(<span class="function"><span class="params">dom</span> =&gt;</span> &#123;[<span class="string">'onselect'</span>, <span class="string">'onselectstart'</span>, <span class="string">'onselectend'</span>, <span class="string">'ondragstart'</span>, <span class="string">'ondragend'</span>, <span class="string">'oncontextmenu'</span>, <span class="string">'oncopy'</span>].forEach(<span class="function"><span class="params">ev</span> =&gt;</span> dom.removeAttribute(ev)); dom.style[<span class="string">'user-select'</span>]=<span class="string">'auto'</span>;&#125;);</span><br></pre></td></tr></table></figure></li><li>密码输入框明文显示（方便查看被浏览器记住但自己已经忘了的密码）<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">javascript:[...document.querySelectorAll(<span class="string">'input[type=password]'</span>)].forEach(<span class="function"><span class="params">i</span> =&gt;</span> i.type = <span class="string">'text'</span>);</span><br></pre></td></tr></table></figure></li><li>给网页内所有元素添加随机颜色外框线<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">javascript:[...document.querySelectorAll(<span class="string">'*'</span>)].forEach(<span class="function"><span class="params">i</span> =&gt;</span> &#123; <span class="keyword">let</span> rand = (~~(<span class="built_in">Math</span>.random() * <span class="number">0xFFFFFF</span>)).toString(<span class="number">16</span>); rand = <span class="string">'#'</span> + (<span class="string">'00000'</span> + rand).slice(<span class="number">-6</span>); i.style.outline = <span class="string">'1px solid '</span> + rand; &#125;);</span><br></pre></td></tr></table></figure></li><li>点击页面随机出现向上浮动并淡出的小字<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">javascript:<span class="function">(<span class="params">(</span>)=&gt;</span>&#123;<span class="keyword">if</span>(<span class="built_in">document</span>.querySelector(<span class="string">'#clickAnimation_'</span>)) <span class="keyword">return</span>; <span class="keyword">var</span> rand=<span class="function"><span class="params">()</span>=&gt;</span>&#123;<span class="keyword">var</span> arr=[<span class="string">'富强'</span>, <span class="string">'民主'</span>, <span class="string">'文明'</span>, <span class="string">'和谐'</span>, <span class="string">'自由'</span>, <span class="string">'平等'</span>, <span class="string">'公正'</span>, <span class="string">'法治'</span>, <span class="string">'爱国'</span>, <span class="string">'敬业'</span>, <span class="string">'诚信'</span>, <span class="string">'友善'</span>]; <span class="keyword">return</span> arr[~~<span class="function">(<span class="params"><span class="built_in">Math</span>.random(</span>)*<span class="params">arr</span>.<span class="params">length</span>)];&#125;; <span class="params">var</span> <span class="params">s</span>=<span class="params">document</span>.<span class="params">createElement</span>(<span class="params"><span class="string">'style'</span></span>); <span class="params">s</span>.<span class="params">id</span>='<span class="params">clickAnimation_</span>'; <span class="params">s</span>.<span class="params">innerText</span>='.<span class="params">click</span>-<span class="params">elem</span>-<span class="params">t</span> &#123;<span class="params">position</span>: <span class="params">absolute</span>; <span class="params">z</span>-<span class="params">index</span>: 9999; <span class="params">color</span>: #<span class="params">f5871f</span>; <span class="params">font</span>-<span class="params">size</span>: 15<span class="params">px</span>; <span class="params">font</span>-<span class="params">weight</span>: <span class="params">bold</span>; <span class="params">cursor</span>: <span class="params">default</span>; <span class="params">user</span>-<span class="params">select</span>: <span class="params">none</span>; <span class="params">animation</span>: <span class="params">floatAndGone</span> 1.7<span class="params">s</span> <span class="params">forwards</span>;&#125; @<span class="params">keyframes</span> <span class="params">floatAndGone</span> &#123;<span class="params">from</span> &#123;<span class="params">transform</span>: <span class="params">translateY</span>(<span class="params"><span class="number">0</span></span>); <span class="params">opacity</span>: 1;&#125; <span class="params">to</span> &#123;<span class="params">transform</span>: <span class="params">translateY</span>(<span class="params"><span class="number">-75</span>px</span>); <span class="params">opacity</span>: 0;&#125;&#125;'; <span class="params">document</span>.<span class="params">querySelector</span>(<span class="params"><span class="string">'head'</span></span>).<span class="params">appendChild</span>(<span class="params">s</span>); <span class="params">document</span>.<span class="params">body</span>.<span class="params">addEventListener</span>(<span class="params"><span class="string">'click'</span>, e=&gt;&#123;<span class="keyword">var</span> dom=<span class="built_in">document</span>.createElement(<span class="string">'span'</span></span>); <span class="params">dom</span>.<span class="params">innerText</span>=<span class="params">rand</span><span class="params">()</span>; <span class="params">dom</span>.<span class="params">className</span>='<span class="params">click</span>-<span class="params">elem</span>-<span class="params">t</span>'; <span class="params">dom</span>.<span class="params">style</span>.<span class="params">top</span>=<span class="params">e</span>.<span class="params">pageY</span>-25+'<span class="params">px</span>'; <span class="params">dom</span>.<span class="params">style</span>.<span class="params">left</span>=<span class="params">e</span>.<span class="params">pageX</span>+'<span class="params">px</span>'; <span class="params">document</span>.<span class="params">body</span>.<span class="params">appendChild</span>(<span class="params">dom</span>); <span class="params">setTimeout</span>(<span class="params">(</span>)=&gt;</span>&#123;<span class="built_in">document</span>.body.removeChild(dom)&#125;, <span class="number">2200</span>) &#125;);&#125;)();</span><br></pre></td></tr></table></figure></li><li>解除所有按钮的禁用状态<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">javascript:[...document.querySelectorAll(<span class="string">'input[type=button], button'</span>)].forEach(<span class="function"><span class="params">i</span> =&gt;</span> i.removeAttribute(<span class="string">'disabled'</span>));</span><br></pre></td></tr></table></figure></li><li>解除所有文本输入框/单选框/复选框的只读和禁用状态<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">javascript:[...document.querySelectorAll(<span class="string">'textarea, input'</span>)].forEach(<span class="function"><span class="params">i</span> =&gt;</span> &#123; i.removeAttribute(<span class="string">'disabled'</span>); i.removeAttribute(<span class="string">'readonly'</span>) &#125;);</span><br></pre></td></tr></table></figure></li></ol><blockquote><p>如果你想要其他脚本，在评论区回复吧.</p></blockquote><h3 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h3><p><em>以下三种方法可任选其一</em></p><ol><li><p>直接复制脚本代码，然后粘贴浏览器的地址栏，然后回车确定（chrome浏览器会去掉前面的 <code>javascript</code> 字母，需要手动加上，部分浏览器的地址栏可能不支持输入脚本）。（如果你想快速体验，可选择这一种）</p></li><li><p>复制脚本代码，然后新建浏览器书签，将代码粘贴到网址的输入框内，名字自己定义，然后保存。打开你需要操作的网页，然后再点击选择此书签。ok！（如果你以后也有使用的需求，可选择这一种）</p></li><li><p>如果你会一点前端调试功能，可以直接打开网页的console，(chrome按F12键或右键页面任意处然后选择检查)。将复制的代码粘贴到console里，然后回车执行。（你想装逼？选择这种吧）</p></li></ol><blockquote><p>刷新页面即失效</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> javascript </tag>
            
            <tag> js脚本 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>无版权图片网站大推荐[搬运]</title>
      <link href="/no-copyright-image-website/"/>
      <url>/no-copyright-image-website/</url>
      
        <content type="html"><![CDATA[<p>无论是写文章、做 PPT 还是找壁纸、换头像，搜图片都是件费时却最出效果的事情。之前小编给大家分享了最好用无版权图片网站之一的 Pixabay，不过图片素材这种东西，尤其是可自由修改使用的图片素材，向来是嫌少不嫌多的。所以这次，小编就把私藏的 60 余家无版权图片网站分享给大家，这家找不到合适的图片？没关系，下一家就有了！从此再也不会被找图这件事情所束缚。</p><a id="more"></a><p>本次推荐分为第一找图梯队、第二找图梯队、精准找图、分门别类找图、备选方案以及最后的终极找图梯队组成。</p><h2 id="第一找图梯队"><a href="#第一找图梯队" class="headerlink" title="# 第一找图梯队"></a># 第一找图梯队</h2><p>根据二八定律，80% 的结果可能来自于 20% 的原因。这在找图片这件事上也适用。虽然这次推荐的无版权图片网站有数十家，但是真正好用的也是只有一部分，而这一部分就足够使用了。</p><h3 id="Unsplash"><a href="#Unsplash" class="headerlink" title="## Unsplash"></a>## <a href="https://unsplash.com/" target="_blank" rel="noopener">Unsplash</a></h3><p>最知名的无版权图片网站，这家以风景为主，数量足够多，但是很多滤镜感太强，颜色太过厚重，比较适合做壁纸，事实上很多壁纸软件也是直接从这上面下载的图。<br><img src="https://ftp.bmp.ovh/imgs/2020/09/625c5797e3704f0f.png" alt=""></p><h3 id="Pixabay"><a href="#Pixabay" class="headerlink" title="## Pixabay"></a>## <a href="https://pixabay.com/" target="_blank" rel="noopener">Pixabay</a></h3><p>可以说是全球最大的免费图片网站了。图多而且种类足够丰富。这其实也是一家集合网站，可以看到 Unsplash 家的很多图也能在 Pixabay 里搜到。<br><img src="https://ftp.bmp.ovh/imgs/2020/09/32442997fd06a0ea.png" alt=""></p><h3 id="Pexels"><a href="#Pexels" class="headerlink" title="## Pexels"></a>## <a href="https://www.pexels.com/" target="_blank" rel="noopener">Pexels</a></h3><p>这家也有很多精美的图片，而且比较好的一点是会有「一周精选」，平常没事的时候来收收图也挺好的。<br><img src="https://ftp.bmp.ovh/imgs/2020/09/a167e20f04cd61d4.png" alt=""></p><h3 id="visualhunt"><a href="#visualhunt" class="headerlink" title="## visualhunt"></a>## <a href="https://visualhunt.com/" target="_blank" rel="noopener">visualhunt</a></h3><p>数量超级多的无版权图片网站，可以根据颜色进行搜索。<br><img src="https://ftp.bmp.ovh/imgs/2020/09/80a7148d66cfa879.png" alt=""></p><h2 id="第二找图梯队"><a href="#第二找图梯队" class="headerlink" title="# 第二找图梯队"></a># 第二找图梯队</h2><h3 id="别样网"><a href="#别样网" class="headerlink" title="## 别样网"></a>## <a href="http://www.ssyer.com/" target="_blank" rel="noopener">别样网</a></h3><p>找图新欢，旅行日常为主，图片多为用户自己上传，所以在其他地方很少见到。</p><h3 id="Gratisography"><a href="#Gratisography" class="headerlink" title="## Gratisography"></a>## <a href="http://www.gratisography.com/" target="_blank" rel="noopener">Gratisography</a></h3><p>每周都会更新，图片角度和题材都比较另类，人物图片不少，另外他家的 logo 也比较另类……</p><h3 id="StreetWill"><a href="#StreetWill" class="headerlink" title="## StreetWill"></a>## <a href="http://streetwill.co/" target="_blank" rel="noopener">StreetWill</a></h3><p>优点是图片都比较精致小众，缺点是更新慢。</p><h3 id="IM-FREE"><a href="#IM-FREE" class="headerlink" title="## IM FREE"></a>## <a href="http://imcreator.com/free" target="_blank" rel="noopener">IM FREE</a></h3><p>图片分类详细，可按分类进行筛选。</p><h3 id="Magdeleine"><a href="#Magdeleine" class="headerlink" title="## Magdeleine"></a>## <a href="http://magdeleine.co/browse/" target="_blank" rel="noopener">Magdeleine</a></h3><p>有编辑精选，图片也比较厚重。</p><h3 id="FancyCrave"><a href="#FancyCrave" class="headerlink" title="## FancyCrave"></a>## <a href="http://fancycrave.com/" target="_blank" rel="noopener">FancyCrave</a></h3><p>每天两张手工筛选精品照片，每张都在诉说一个故事。</p><h2 id="精准找图梯队"><a href="#精准找图梯队" class="headerlink" title="# 精准找图梯队"></a># 精准找图梯队</h2><p>一般搜索图片都是用关键词进行搜索，搜索单一的关键词还好，一旦稍复杂些的就很容易搜索不出来，这时候你就需要一些精准找图方案。</p><h3 id="Flickr"><a href="#Flickr" class="headerlink" title="## Flickr"></a>## <a href="https://www.flickr.com/" target="_blank" rel="noopener">Flickr</a></h3><p>第一个是雅虎著名的图片社区——Flickr，由于汇集了大批的摄影师，所以 Flickr 家的图片质量都相当之高，不过你可能会说 Flickr 的图片不都是有版权的吗？别急，在「授权」那里选择「所有创用CC」或者「允许商业用途」即可找到那些可以使用的图片啦，由于 Flickr 目前没有简体中文版，所以搜索时用英文或者繁体中文会得到比较好的结果。</p><h3 id="Google"><a href="#Google" class="headerlink" title="## Google"></a>## <a href="http://www.google.com/" target="_blank" rel="noopener">Google</a></h3><p>第二个是我大谷歌，谷歌的图片搜索那是相当的强大，选择右侧的「工具」，可以自定义很多东西，包括大小、颜色及使用权限。</p><h2 id="分类找图"><a href="#分类找图" class="headerlink" title="# 分类找图"></a># 分类找图</h2><h3 id="Life-of-Pix"><a href="#Life-of-Pix" class="headerlink" title="## Life of Pix"></a>## <a href="http://www.lifeofpix.com/" target="_blank" rel="noopener">Life of Pix</a></h3><p>景色建筑为主，色调比较统一。</p><h3 id="pngimg"><a href="#pngimg" class="headerlink" title="## pngimg"></a>## <a href="http://pngimg.com/" target="_blank" rel="noopener">pngimg</a></h3><p>这个厉害了，2 万多张不同种类的无背景素材图片！全都是抠好图的，直接免费用！。</p><h3 id="Moveast"><a href="#Moveast" class="headerlink" title="## Moveast"></a>## <a href="http://moveast.me/" target="_blank" rel="noopener">Moveast</a></h3><p>全部都是旅行风景图片。</p><h3 id="旅行日记"><a href="#旅行日记" class="headerlink" title="## 旅行日记"></a>## <a href="http://travelcoffeebook.com/" target="_blank" rel="noopener">旅行日记</a></h3><p>从名字就能看出来，主要是旅行题材的图片。</p><h3 id="FoodiesFeed"><a href="#FoodiesFeed" class="headerlink" title="## FoodiesFeed"></a>## <a href="https://foodiesfeed.com/" target="_blank" rel="noopener">FoodiesFeed</a></h3><p>全是好吃的！全是免费的（图片）！</p><h3 id="Sozai-Page"><a href="#Sozai-Page" class="headerlink" title="## Sozai-Page"></a>## <a href="http://www.sozai-page.com/" target="_blank" rel="noopener">Sozai-Page</a></h3><p>日本的高清食物无背景素材图片。</p><h3 id="PEEKSPACE"><a href="#PEEKSPACE" class="headerlink" title="## PEEKSPACE"></a>## <a href="http://peek.space/" target="_blank" rel="noopener">PEEKSPACE</a></h3><p>超清的太空图片，大多来自 NASA。</p><h3 id="kaboompics"><a href="#kaboompics" class="headerlink" title="## kaboompics"></a>## <a href="http://kaboompics.com/" target="_blank" rel="noopener">kaboompics</a></h3><p>以生活化场景为主，比方说手机、日历之类的，也有一些 mockup。</p><h3 id="泼辣有图"><a href="#泼辣有图" class="headerlink" title="## 泼辣有图"></a>## <a href="http://www.polayoutu.com/collections" target="_blank" rel="noopener">泼辣有图</a></h3><p>泼辣修图出的开源摄影网站，全部是无版权的摄影作品。</p><h3 id="Oliur-Rahman"><a href="#Oliur-Rahman" class="headerlink" title="## Oliur Rahman"></a>## <a href="http://photos.oliur.com/" target="_blank" rel="noopener">Oliur Rahman</a></h3><p>各种 iPhone、MacBook 和其他物件的好照片。</p><h3 id="Pixite-Source"><a href="#Pixite-Source" class="headerlink" title="## Pixite Source"></a>## <a href="http://source.pixite.co/" target="_blank" rel="noopener">Pixite Source</a></h3><p>出品了图像编辑应用 Union、涂色应用 Pigment、矢量制作工具 Assembly 等知名应用的 Pixite，出的一个图库网站，可以搜索图片、材质、色调搜索，里面有很多比较精致的小众插图。</p><h3 id="Free-Nature-Stock"><a href="#Free-Nature-Stock" class="headerlink" title="## Free Nature Stock"></a>## <a href="http://freenaturestock.com/" target="_blank" rel="noopener">Free Nature Stock</a></h3><p>如网站名，全部是自然风光图片。</p><h3 id="New-Old-Stock"><a href="#New-Old-Stock" class="headerlink" title="## New Old Stock"></a>## <a href="http://nos.twnsnd.co/" target="_blank" rel="noopener">New Old Stock</a></h3><p>公共领域的一些老照片，可以免费使用。</p><h3 id="Freely-Photos"><a href="#Freely-Photos" class="headerlink" title="## Freely Photos"></a>## <a href="http://freelyphotos.com/" target="_blank" rel="noopener">Freely Photos</a></h3><p>很多十字架，很多宗教祈祷的图片。</p><h2 id="备选方案"><a href="#备选方案" class="headerlink" title="# 备选方案"></a># 备选方案</h2><p>接下来这些就是上述都找不到的情况下的备选方案啦，多达XX个网站，不信没有合适的，哼。</p><p>这些网站有的是因为图片质量参差不齐，有的是因为上述的网站已经能够解决需求，所以没怎么刷，大家平时有时间的时候可以多逛逛这些网站，收集一些素材</p><h3 id="Realistic-Shots"><a href="#Realistic-Shots" class="headerlink" title="## Realistic Shots"></a>## <a href="http://realisticshots.com/" target="_blank" rel="noopener">Realistic Shots</a></h3><p>生活化场景为主，每周 7 张图片。</p><h3 id="DesignerPics"><a href="#DesignerPics" class="headerlink" title="## DesignerPics"></a>## <a href="http://www.designerspics.com/" target="_blank" rel="noopener">DesignerPics</a></h3><p>多为局部特写，也可按种类进行筛选。</p><h3 id="Stokpic"><a href="#Stokpic" class="headerlink" title="## Stokpic"></a>## <a href="http://stokpic.com/" target="_blank" rel="noopener">Stokpic</a></h3><p>有很多人物图片，每两周更新 10 张。</p><h3 id="JESHOOTS"><a href="#JESHOOTS" class="headerlink" title="## JÉSHOOTS"></a>## <a href="http://jeshoots.com/" target="_blank" rel="noopener">JÉSHOOTS</a></h3><p>2014 年开始运营的无版权图片网站，图片质量还不错。</p><h3 id="ISO-REPUBLIC"><a href="#ISO-REPUBLIC" class="headerlink" title="## ISO REPUBLIC"></a>## <a href="http://isorepublic.com/" target="_blank" rel="noopener">ISO REPUBLIC</a></h3><p>多走简洁风格。</p><h3 id="jay-mantri"><a href="#jay-mantri" class="headerlink" title="## jay mantri"></a>## <a href="http://jaymantri.com/" target="_blank" rel="noopener">jay mantri</a></h3><p>个人博客网站，每周更新 7 张图片。</p><h3 id="picjumbo"><a href="#picjumbo" class="headerlink" title="## picjumbo"></a>## <a href="https://picjumbo.com/" target="_blank" rel="noopener">picjumbo</a></h3><p>日常场景居多，有不少数码设备。</p><h3 id="public-domain-archive"><a href="#public-domain-archive" class="headerlink" title="## public domain archive"></a>## <a href="http://publicdomainarchive.com/" target="_blank" rel="noopener">public domain archive</a></h3><p>很多黑白照片，也有很多可供个人使用的无版权图片。</p><h3 id="FFCU"><a href="#FFCU" class="headerlink" title="## FFCU"></a>## <a href="http://freeforcommercialuse.net/" target="_blank" rel="noopener">FFCU</a></h3><p>图片数量不多，不过有一些好图。</p><h3 id="StockSnap"><a href="#StockSnap" class="headerlink" title="## StockSnap"></a>## <a href="https://stocksnap.io/" target="_blank" rel="noopener">StockSnap</a></h3><p>生活类图片，角度和主题都不错。</p><h3 id="My-Stock-Photos"><a href="#My-Stock-Photos" class="headerlink" title="## My Stock Photos"></a>## <a href="http://mystock.photos/" target="_blank" rel="noopener">My Stock Photos</a></h3><p>这里面的图片都挺好看的。</p><h3 id="skuawk"><a href="#skuawk" class="headerlink" title="## skuawk"></a>## <a href="http://skuawk.com/" target="_blank" rel="noopener">skuawk</a></h3><p>摄影师拍摄的无版权图片网站，分类浏览。</p><h3 id="BARN-IMAGES"><a href="#BARN-IMAGES" class="headerlink" title="## BARN IMAGES"></a>## <a href="https://barnimages.com/" target="_blank" rel="noopener">BARN IMAGES</a></h3><p>有很多比较生活化和小清新的图片。</p><h3 id="freejpg"><a href="#freejpg" class="headerlink" title="## freejpg"></a>## <a href="http://en.freejpg.com.ar/" target="_blank" rel="noopener">freejpg</a></h3><p>有一些动物的图片，可直接搜索，也可按照颜色搜索。</p><h3 id="stockvault"><a href="#stockvault" class="headerlink" title="## stockvault"></a>## <a href="http://www.stockvault.net/" target="_blank" rel="noopener">stockvault</a></h3><p>大部分为摄影作品，也有少量的插图。</p><h3 id="Cupcake"><a href="#Cupcake" class="headerlink" title="## Cupcake"></a>## <a href="http://cupcake.nilssonlee.se/" target="_blank" rel="noopener">Cupcake</a></h3><p>图片色调厚实，适合做背景图。</p><h3 id="Trunklog"><a href="#Trunklog" class="headerlink" title="## Trunklog"></a>## <a href="http://trunklog.com//" target="_blank" rel="noopener">Trunklog</a></h3><p>瑞典的一位摄影师旅行所拍摄的照片，全部无偿使用。</p><p>接下来介绍一些日本的无版权图片网站。</p><h3 id="PAKUTASO"><a href="#PAKUTASO" class="headerlink" title="## PAKUTASO"></a>## <a href="https://www.pakutaso.com/" target="_blank" rel="noopener">PAKUTASO</a></h3><p>一看就知道是霓虹国的网站，稀奇古怪的图片一大堆，不过网站 logo 好萌……。</p><h3 id="Photock"><a href="#Photock" class="headerlink" title="## Photock"></a>## <a href="https://www.photock.jp/" target="_blank" rel="noopener">Photock</a></h3><p>日本的无版权图片网站，在里面能很容易地找到富士山、樱花、东京等元素。</p><h3 id="無料写真素材"><a href="#無料写真素材" class="headerlink" title="## 無料写真素材"></a>## <a href="http://freephoto.bizutart.com/" target="_blank" rel="noopener">無料写真素材</a></h3><p>日本无版权图片，全部都是日式元素图片，红叶啊、樱花啊、猫啊啥的。</p><h3 id="photosku"><a href="#photosku" class="headerlink" title="## photosku"></a>## <a href="http://photosku.com/" target="_blank" rel="noopener">photosku</a></h3><p>还是日本的，基本没用过……。</p><h3 id="東京デート"><a href="#東京デート" class="headerlink" title="## 東京デート"></a>## <a href="http://www.tokyo-date.net/" target="_blank" rel="noopener">東京デート</a></h3><p>日本东京专门的无版权图片网站。</p><h3 id="沖縄写真素材"><a href="#沖縄写真素材" class="headerlink" title="## 沖縄写真素材"></a>## <a href="http://image.ajima.jp/" target="_blank" rel="noopener">沖縄写真素材</a></h3><p>恩…日本冲绳专门的无版权图片网站…。</p><h3 id="Futta"><a href="#Futta" class="headerlink" title="## Futta"></a>## <a href="http://www.futta.net/" target="_blank" rel="noopener">Futta</a></h3><p>日本无版权图片网站，基本为风景图片。</p><h3 id="Imgstyle"><a href="#Imgstyle" class="headerlink" title="## Imgstyle"></a>## <a href="http://www.imgstyle.info/index.php" target="_blank" rel="noopener">Imgstyle</a></h3><p>如其描述：无料、商业利用可、加工自由、登录不要（全部都是高清植物图片）。</p><h3 id="ソザイング"><a href="#ソザイング" class="headerlink" title="## ソザイング"></a>## <a href="http://sozaing.com/" target="_blank" rel="noopener">ソザイング</a></h3><p>这家网站有个分类叫做「365日365枚」，就像一本无版权图片的日记本一样，里面有很多很有意思的图片，比方说纯蓝色的水彩、并立的企鹅、一颗土豆等。</p><h2 id="终极集合"><a href="#终极集合" class="headerlink" title="# 终极集合"></a># 终极集合</h2><p>挨个网站去搜还是略麻烦，如果有集合类的网站就好了……</p><p>……等会，谁说没有的？！</p><h3 id="The-Stocks"><a href="#The-Stocks" class="headerlink" title="## The Stocks"></a>## <a href="http://thestocks.im/" target="_blank" rel="noopener">The Stocks</a></h3><p>The Stocks 就是家无版权图片集合网站，集合了 Unsplash、Stocksy、Pixabay、Free Range、Little Visuals、New Old Stock、Visual Hunt、Super Famous、Startup Stock、GRATISOGRAPHY、GETREFE、PEXELS、jay mantri、Magdeleine、travel coffee、MOVEAST、Barn Images 一共 17 家图片网站，全部 CC0 协议！全部无版权免费使用！</p><p>除了无版权图片外，The Stocks 里还有多家配色、图标、视频、手机/电脑外壳、字体等网站集合……</p><p>（不过由于是集合网站，所以刷新速度上可能会慢点，但这网站我依然给满分）<br><img src="https://ftp.bmp.ovh/imgs/2020/09/1c2c36b2bf222370.png" alt=""></p><h3 id="AllTheFreeStock"><a href="#AllTheFreeStock" class="headerlink" title="## AllTheFreeStock"></a>## <a href="http://allthefreestock.com/" target="_blank" rel="noopener">AllTheFreeStock</a></h3><p>这个跟 Stocks 差不多，但却更加强大！一个地址，找到所有无版权图片、模型、视频、声效、配色、网页模板、字体、图标、邮件模板……</p><p>简直就是懒人福音。<br><img src="https://ftp.bmp.ovh/imgs/2020/09/fb991d576ab8354b.png" alt=""></p><h3 id="EVERYPIXEL"><a href="#EVERYPIXEL" class="headerlink" title="## EVERYPIXEL"></a>## <a href="https://everypixel.com/" target="_blank" rel="noopener">EVERYPIXEL</a></h3><p>智能搜图工具，可以搜索各大图片网站的图片，并对齐进行精准化的分类。颜色、类型、尺寸、版权，而且可以九宫格单独设置……除了赞美，我无能为力。<br><img src="https://ftp.bmp.ovh/imgs/2020/09/17475002fea48e18.png" alt=""></p><h3 id="LibreStock"><a href="#LibreStock" class="headerlink" title="## LibreStock"></a>## <a href="http://librestock.com/" target="_blank" rel="noopener">LibreStock</a></h3><p>一键搜索 47 家无版权图片网站的精品好图。</p><h3 id="Finda-Photo"><a href="#Finda-Photo" class="headerlink" title="## Finda Photo"></a>## <a href="http://finda.photo/" target="_blank" rel="noopener">Finda Photo</a></h3><p>一键搜索 Barn Images、Life Of Pix 等十余家的无版权图片，网站本身做得很简洁。</p><p><em>如果信息错误或者图片网站已停用，请留言，谢谢</em></p><blockquote><p>[搬运处]：<a href="http://zuimeia.com/app/5022/" target="_blank" rel="noopener">http://zuimeia.com/app/5022/</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> photo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Unsplash </tag>
            
            <tag> copyright </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vscode 插件推荐</title>
      <link href="/recommended-vscode-plugin/"/>
      <url>/recommended-vscode-plugin/</url>
      
        <content type="html"><![CDATA[<p class='p center logo large blue'>VSCode Plugin</p><a id="more"></a><h2 id="提效类插件"><a href="#提效类插件" class="headerlink" title="提效类插件"></a>提效类插件</h2><h3 id="Bracket-Pair-Colorizer"><a href="#Bracket-Pair-Colorizer" class="headerlink" title="Bracket Pair Colorizer"></a>Bracket Pair Colorizer</h3><p><strong>快速定位括号</strong>,它为代码中的各种结对的括号兄弟们提供了颜色高亮等功能。<br>相关链接: <a href="https://github.com/CoenraadS/Bracket-Pair-Colorizer-2" target="_blank" rel="noopener">github</a></p><p><img src="https://ftp.bmp.ovh/imgs/2020/09/077efe2ca0034ed9.gif" alt=""></p><h3 id="Vetur"><a href="#Vetur" class="headerlink" title="Vetur"></a>Vetur</h3><p><strong>vue 代码工具</strong>,它提供了vue的代码高亮，代码块，错误检查等…</p><h3 id="Markdown-PDF"><a href="#Markdown-PDF" class="headerlink" title="Markdown PDF"></a>Markdown PDF</h3><p><strong>转换md文件为pdf文件</strong>,它可以将md文件转换为pdf、html、png、jpeg文件，另外可以设置页眉和页脚。<br><img src="https://ftp.bmp.ovh/imgs/2020/09/881f902c3aa94d05.png" alt=""></p><h3 id="Markdown-TOC"><a href="#Markdown-TOC" class="headerlink" title="Markdown TOC"></a>Markdown TOC</h3><p><strong>快速添加md文件目录</strong>,它可以快速将现有的md文件的标题添加为目录<br><img src="https://ftp.bmp.ovh/imgs/2020/09/f2e36dc3788804b2.gif" alt=""></p>]]></content>
      
      
      <categories>
          
          <category> vscode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vscode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>znu-event 一个简单的event emitter</title>
      <link href="/javascript/znu-event-A-sample-event-emitter/"/>
      <url>/javascript/znu-event-A-sample-event-emitter/</url>
      
        <content type="html"><![CDATA[<p>znu-event 一个简单的event emitter，无依赖，TypeScript、rollup、自动测试、一键发布到GitHub和NPM。<br><a href="https://github.com/chenchenwuai/znu-event" target="_blank" rel="noopener">GitHub</a><br><a href="https://www.npmjs.com/package/znu-event" target="_blank" rel="noopener">NPM</a><br>如果帮助到了你，请给我一个star<del>~</del> 💖，如果你发现bug，请尽情的在下方评论或者提issue。</p><a id="more"></a><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i znu-event</span><br></pre></td></tr></table></figure><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> EventEmitter <span class="keyword">from</span>  <span class="string">'./znu-event'</span>;</span><br><span class="line"><span class="keyword">const</span> emitter = <span class="keyword">new</span> EventEmitter();</span><br><span class="line">emitter.on(<span class="string">'add'</span>, data=&gt;&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(data) <span class="comment">// 1</span></span><br><span class="line">&#125;);</span><br><span class="line">emitter.emit(<span class="string">'add'</span>, <span class="number">1</span>);</span><br></pre></td></tr></table></figure><h2 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h2><h3 id="on-eventName-listener"><a href="#on-eventName-listener" class="headerlink" title="on(eventName, listener)"></a>on(eventName, listener)</h3><p>绑定事件</p><table><thead><tr><th>名称</th><th>类型</th><th>数据类型</th><th>是否必填</th><th>说明</th></tr></thead><tbody><tr><td>eventName</td><td>参数</td><td><code>String/Symbol</code></td><td>是</td><td>事件名称</td></tr><tr><td>listener</td><td>参数</td><td><code>Function</code></td><td>是</td><td>对应的回调函数</td></tr><tr><td>emitter</td><td>返回值</td><td><code>EventEmitter</code></td><td>—</td><td>实例</td></tr></tbody></table><h3 id="off-eventName-listener"><a href="#off-eventName-listener" class="headerlink" title="off(eventName, listener)"></a>off(eventName, listener)</h3><p>解除绑定, 如果不填写<code>listener</code>, 那么<code>eventName</code>对应的<code>listener</code>都会被移除.</p><table><thead><tr><th>名称</th><th>类型</th><th>数据类型</th><th>是否必填</th><th>说明</th></tr></thead><tbody><tr><td>eventName</td><td>参数</td><td><code>String/Symbol</code></td><td>是</td><td>事件名称</td></tr><tr><td>listener</td><td>参数</td><td><code>Function</code></td><td>是</td><td>对应的回调函数</td></tr><tr><td>emitter</td><td>返回值</td><td><code>EventEmitter</code></td><td>—</td><td>实例</td></tr></tbody></table><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> callback = <span class="function"><span class="params">data</span>=&gt;</span>&#123;</span><br><span class="line">    alert(data)</span><br><span class="line">&#125;;</span><br><span class="line">emitter.on(<span class="string">'add'</span>, callback);</span><br><span class="line"><span class="comment">// 解除绑定</span></span><br><span class="line">emitter.off(<span class="string">'add'</span>, callback);</span><br><span class="line"><span class="comment">// add事件不会触发</span></span><br><span class="line">emitter.emit(<span class="string">'add'</span>, <span class="number">1</span>);</span><br></pre></td></tr></table></figure><h3 id="once-eventName-listener"><a href="#once-eventName-listener" class="headerlink" title="once(eventName, listener)"></a>once(eventName, listener)</h3><p>绑定事件, 只触发一次</p><table><thead><tr><th>名称</th><th>类型</th><th>数据类型</th><th>是否必填</th><th>说明</th></tr></thead><tbody><tr><td>eventName</td><td>参数</td><td><code>String/Symbol</code></td><td>是</td><td>事件名称</td></tr><tr><td>listener</td><td>参数</td><td><code>Function</code></td><td>是</td><td>对应的回调函数</td></tr><tr><td>emitter</td><td>返回值</td><td><code>EventEmitter</code></td><td>—</td><td>实例</td></tr></tbody></table><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> callback = <span class="function"><span class="params">data</span>=&gt;</span>&#123;</span><br><span class="line">    alert(data)</span><br><span class="line">&#125;;</span><br><span class="line">emitter.once(<span class="string">'add'</span>, callback);</span><br><span class="line"><span class="comment">// add事件触发</span></span><br><span class="line">emitter.emit(<span class="string">'add'</span>, <span class="number">1</span>);</span><br><span class="line"><span class="comment">// add事件不会触发</span></span><br><span class="line">emitter.emit(<span class="string">'add'</span>, <span class="number">1</span>);</span><br></pre></td></tr></table></figure><h3 id="emit-eventName-…args"><a href="#emit-eventName-…args" class="headerlink" title="emit(eventName [, …args])"></a>emit(eventName [, …args])</h3><p>触发事件, 支持任意数量参数</p><table><thead><tr><th>名称</th><th>类型</th><th>数据类型</th><th>是否必填</th><th>说明</th></tr></thead><tbody><tr><td>eventName</td><td>参数</td><td><code>String/Symbol</code></td><td>是</td><td>事件名称</td></tr><tr><td>…args</td><td>参数</td><td><code>Any</code></td><td>是</td><td>对应的回调函数</td></tr><tr><td>emitter</td><td>返回值</td><td><code>Boolean</code></td><td>—</td><td>实例</td></tr></tbody></table><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> callback = <span class="function">(<span class="params">a,b,c,d</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>(a,b,c,d); <span class="comment">// 1,2,3,4</span></span><br><span class="line">&#125;;</span><br><span class="line">emitter.once(<span class="string">'add'</span>, callback);</span><br><span class="line"><span class="comment">// add事件触发</span></span><br><span class="line">emitter.emit(<span class="string">'add'</span>, <span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>);</span><br></pre></td></tr></table></figure><h3 id="has-eventName"><a href="#has-eventName" class="headerlink" title="has(eventName)"></a>has(eventName)</h3><p>是否绑定了指定事件</p><table><thead><tr><th>名称</th><th>类型</th><th>数据类型</th><th>是否必填</th><th>说明</th></tr></thead><tbody><tr><td>eventName</td><td>参数</td><td><code>String/Symbol</code></td><td>是</td><td>事件名称</td></tr></tbody></table><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">emitter.on(<span class="string">'add'</span>, callback);</span><br><span class="line"></span><br><span class="line">emitter.has(<span class="string">'add'</span>); <span class="comment">// true</span></span><br></pre></td></tr></table></figure><h3 id="eventNames"><a href="#eventNames" class="headerlink" title="eventNames()"></a>eventNames()</h3><p>返回所有绑定事件名称</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">emitter.eventNames();</span><br></pre></td></tr></table></figure><h3 id="offAll"><a href="#offAll" class="headerlink" title="offAll()"></a>offAll()</h3><p>解除所有绑定事件</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> callback = <span class="function">(<span class="params">a,b,c,d</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>(a,b,c,d); <span class="comment">// 1,2,3,4</span></span><br><span class="line">&#125;;</span><br><span class="line">emitter.on(<span class="string">'add'</span>, callback);</span><br><span class="line">emitter.on(<span class="string">'edf'</span>, callback);</span><br><span class="line">emitter.offAll();</span><br><span class="line"></span><br><span class="line"><span class="comment">// add，edf事件不会触发</span></span><br><span class="line">emitter.emit(<span class="string">'add'</span>, <span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>);</span><br><span class="line">emitter.emit(<span class="string">'edf'</span>, <span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>);</span><br></pre></td></tr></table></figure><h3 id="destroy"><a href="#destroy" class="headerlink" title="destroy()"></a>destroy()</h3><p>销毁实例</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> callback = <span class="function">(<span class="params">a,b,c,d</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>(a,b,c,d); <span class="comment">// 1,2,3,4</span></span><br><span class="line">&#125;;</span><br><span class="line">emitter.once(<span class="string">'add'</span>, callback);</span><br><span class="line">emitter.destroy();</span><br><span class="line"></span><br><span class="line"><span class="comment">// add事件不会触发</span></span><br><span class="line">emitter.emit(<span class="string">'add'</span>, <span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>);</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> javascript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>TypeScript学习(1)-基础类型</title>
      <link href="/typescript/typescript-learning-1/"/>
      <url>/typescript/typescript-learning-1/</url>
      
        <content type="html"><![CDATA[<blockquote><p>学习资源为<a href="https://www.tslang.cn/docs/home.html" target="_blank" rel="noopener">TypeScript中文网</a></p></blockquote><p>为了方便，无特殊说明，以下的<code>js</code>表示 JavaScript，<code>ts</code>表示TypeScript</p><a id="more"></a><h3 id="基础类型"><a href="#基础类型" class="headerlink" title="基础类型"></a>基础类型</h3><p>基础类型包括 <code>boolean</code>,<code>number</code>,<code>string</code>,<code>数组</code>,<code>元组</code>,<code>enum</code>,<code>any</code>,<code>void</code>,<code>null</code>,<code>undefined</code>.<code>never</code>,<code>object</code>.<br>使用方法</p><figure class="highlight typescript"><figcaption><span>typescript</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 变量:数据类型</span></span><br><span class="line"><span class="keyword">let</span> a: <span class="built_in">number</span> = <span class="number">1</span> <span class="comment">// 数字</span></span><br><span class="line"><span class="keyword">let</span> b: <span class="built_in">string</span> = <span class="string">'string'</span> <span class="comment">// 字符串</span></span><br><span class="line"><span class="keyword">let</span> c: <span class="built_in">number</span>[] = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>] <span class="comment">// 数组</span></span><br><span class="line"><span class="keyword">let</span> d: [<span class="built_in">number</span>,<span class="built_in">string</span>] = [<span class="number">1</span>,<span class="string">'hello world'</span>] <span class="comment">// 元组</span></span><br></pre></td></tr></table></figure><h4 id="布尔值-boolean"><a href="#布尔值-boolean" class="headerlink" title="布尔值 boolean"></a>布尔值 boolean</h4><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> isTrue: <span class="built_in">boolean</span> = <span class="literal">true</span> <span class="comment">// 只能true、false两个值</span></span><br></pre></td></tr></table></figure><h4 id="数字-number"><a href="#数字-number" class="headerlink" title="数字 number"></a>数字 number</h4><p>ts始于js，所以ts中的所有数字都是浮点数，类型为<code>number</code>。除了支持十进制和十六进制字面量，ts还支持es6中引入的二进制和八进制字面量</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> decLiteral: <span class="built_in">number</span> = <span class="number">6</span>; <span class="comment">// 十进制</span></span><br><span class="line"><span class="keyword">let</span> hexLiteral: <span class="built_in">number</span> = <span class="number">0xf00d</span>; <span class="comment">// 十六进制 0x 数字0+小写字母x</span></span><br><span class="line"><span class="keyword">let</span> binaryLiteral: <span class="built_in">number</span> = <span class="number">0b1010</span>; <span class="comment">// 二进制 0b</span></span><br><span class="line"><span class="keyword">let</span> octalLiteral: <span class="built_in">number</span> = <span class="number">0o744</span>; <span class="comment">// 八进制 0o 字母o</span></span><br></pre></td></tr></table></figure><h4 id="字符串-string"><a href="#字符串-string" class="headerlink" title="字符串 string"></a>字符串 string</h4><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> nickname: <span class="built_in">string</span> = <span class="string">'chenuai'</span></span><br><span class="line"><span class="keyword">let</span> age: <span class="built_in">number</span> = <span class="number">26</span></span><br><span class="line"><span class="keyword">let</span> hello: <span class="built_in">string</span> = <span class="string">'hello, my name is '</span> + nickname + <span class="string">', I am '</span> + age + <span class="string">'years old.'</span></span><br><span class="line"><span class="keyword">let</span> hello1: <span class="built_in">string</span> = <span class="string">`hello, my name is <span class="subst">$&#123;nickname&#125;</span>, I am <span class="subst">$&#123;age&#125;</span> years old.`</span> <span class="comment">// es6写法</span></span><br></pre></td></tr></table></figure><h4 id="数组"><a href="#数组" class="headerlink" title="数组 []"></a>数组 []</h4><p>ts表示数组有两种方式<br>1.元素类型后面加<code>[]</code></p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> list: <span class="built_in">string</span>[] = [<span class="string">'chenuai'</span>,<span class="string">'hello world'</span>]</span><br><span class="line"><span class="keyword">let</span> list2: <span class="built_in">number</span>[] = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br></pre></td></tr></table></figure><p>2.使用数组泛型,之后讲解什么是泛型</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> list: <span class="built_in">Array</span>&lt;<span class="built_in">number</span>&gt; = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">4</span>]</span><br></pre></td></tr></table></figure><h4 id="元组-Tuple"><a href="#元组-Tuple" class="headerlink" title="元组(Tuple)"></a>元组(Tuple)</h4><p>元组类型允许表示一个已知元素数量和类型的数组，各元素的类型不必相同。 比如，你可以定义一对值分别为 <code>string</code>和<code>number</code>类型的元组</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> test: [<span class="built_in">number</span>,<span class="built_in">string</span>,<span class="built_in">boolean</span>] = [<span class="number">27</span>,<span class="string">'chenuai'</span>,<span class="literal">false</span>] </span><br><span class="line"><span class="keyword">let</span> userinfo: [<span class="built_in">string</span>,<span class="built_in">number</span>] = [<span class="string">'chenuai'</span>,<span class="number">27</span>] </span><br><span class="line"><span class="comment">// Error : userinfo[1] = ['chenwuai'] // 必须和定义的顺序一样</span></span><br><span class="line"><span class="comment">// 但是如果出现数组越界的情况，越界元素值必须是(string|number)类型</span></span><br><span class="line"><span class="comment">// 例如：</span></span><br><span class="line">userinfo[<span class="number">2</span>] = <span class="string">'第三个元素'</span> <span class="comment">// true</span></span><br><span class="line">userinfo[<span class="number">3</span>] = <span class="number">4</span> <span class="comment">// true</span></span><br><span class="line">userinfo[<span class="number">5</span>] = <span class="literal">true</span> <span class="comment">// error 此处错误，因为布尔值不是string或者number类型</span></span><br><span class="line"><span class="comment">// 此处牵扯联合类型，之后讲解。</span></span><br></pre></td></tr></table></figure><h4 id="枚举-enum"><a href="#枚举-enum" class="headerlink" title="枚举 enum"></a>枚举 enum</h4><p><code>enum</code>类型是对js标准数据类型的一个补充。 像C#等其它语言一样，使用枚举类型可以为一组数值赋予友好的名字</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">enum</span> Color &#123;Red, Green, Blue&#125; <span class="comment">// 默认从0开始编号</span></span><br><span class="line"><span class="keyword">enum</span> videoStatus = &#123; connect = <span class="number">1</span>, play, pause, stop &#125; <span class="comment">// 默认从1开始编号</span></span><br><span class="line"><span class="keyword">enum</span> videoType = &#123; mp4, flv = <span class="number">2</span>, hls = <span class="number">4</span>, rtsp &#125; <span class="comment">// 默认从0开始，flv为2，hls为4， rtsp没有手动设置值，则它为上一个元素的值+1，所以为5</span></span><br></pre></td></tr></table></figure><p>枚举类型提供的一个便利是你可以由枚举的值得到它的名字。<br>例如，我们知道颜色数值为2，但是不确定它映射到Color里的哪个名字，我们可以查找相应的名字：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> colorName: <span class="built_in">string</span> = Color[<span class="number">2</span>]</span><br><span class="line"><span class="built_in">console</span>.log(colorName) <span class="comment">// blue 因为在Color的枚举里面，blue对应的值为2</span></span><br></pre></td></tr></table></figure><h4 id="Any"><a href="#Any" class="headerlink" title="Any"></a>Any</h4><p>有时候，我们会想要为那些在编程阶段还不清楚类型的变量指定一个类型。 这些值可能来自于动态的内容，比如来自用户输入或第三方代码库。 这种情况下，我们不希望类型检查器对这些值进行检查而是直接让它们通过编译阶段的检查。 那么我们可以使用<code>any</code>类型来标记这些变量</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 刚开始学ts时，如果不清楚使用什么类型，可以使用any，</span></span><br><span class="line"><span class="keyword">let</span> notSure: <span class="built_in">any</span> = <span class="number">4</span>;</span><br><span class="line">notSure = <span class="string">"maybe a string instead"</span>;</span><br><span class="line">notSure = <span class="literal">false</span>;</span><br></pre></td></tr></table></figure><p>在对现有代码进行改写的时候，<code>any</code>类型是十分有用的，它允许你在编译时可选择地包含或移除类型检查。 你可能认为<code>Object</code>类型（见下方Object）有相似的作用，就像它在其它语言中那样。 但是<code>Object</code>类型的变量只是允许你给它赋任意值 - 但是却不能够在它上面调用任意的方法，即便它真的有这些方法：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> notSure: <span class="built_in">any</span> = <span class="number">4</span>;</span><br><span class="line">notSure.ifItExists(); <span class="comment">// okay, 在运行时，ifItExists方法可能存在</span></span><br><span class="line">notSure.toFixed(); <span class="comment">// okay, toFixed方法存在</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> prettySure: <span class="built_in">Object</span> = <span class="number">4</span>;</span><br><span class="line">prettySure.toFixed(); <span class="comment">// Error: Property 'toFixed' doesn't exist on type 'Object'. 属性toFixed 不存在</span></span><br></pre></td></tr></table></figure><p>当你只知道一部分数据的类型时，<code>any</code>类型也是有用的。 比如，你有一个数组，它包含了不同的类型的数据：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> list: <span class="built_in">any</span>[] = [<span class="number">1</span>, <span class="literal">true</span>, <span class="string">"free"</span>];</span><br><span class="line">list[<span class="number">1</span>] = <span class="number">100</span>;</span><br></pre></td></tr></table></figure><h4 id="Void"><a href="#Void" class="headerlink" title="Void"></a>Void</h4><p>某种程度上来说，<code>void</code>类型像是与<code>any</code>类型相反，它表示没有任何类型。 当一个函数没有返回值时，你通常会见到其返回值类型是 <code>void</code>：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">warnUser</span>(<span class="params"></span>): <span class="title">void</span> </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">"This is my warning message"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 声明一个void类型的变量没有什么大用，因为你只能为它赋予undefined和null：</span></span><br><span class="line"><span class="keyword">let</span> unusable: <span class="built_in">void</span> = <span class="literal">undefined</span>;</span><br></pre></td></tr></table></figure><h4 id="Null-和-Undefined"><a href="#Null-和-Undefined" class="headerlink" title="Null 和 Undefined"></a>Null 和 Undefined</h4><p>ts里，<code>undefined</code>和<code>null</code>两者各自有自己的类型分别叫做<code>undefined</code>和<code>null</code>。 和 <code>void</code>相似，它们的本身的类型用处不是很大：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> u: <span class="literal">undefined</span> = <span class="literal">undefined</span>;</span><br><span class="line"><span class="keyword">let</span> n: <span class="literal">null</span> = <span class="literal">null</span>;</span><br></pre></td></tr></table></figure><p>默认情况下<code>null</code>和<code>undefined</code>是所有类型的子类型。 就是说你可以把 <code>null</code>和<code>undefined</code>赋值给<code>number</code>类型的变量。<br>然而，当你指定了<code>--strictNullChecks</code>标记，<code>null</code>和<code>undefined</code>只能赋值给<code>void</code>和它们各自。 这能避免 很多常见的问题。 也许在某处你想传入一个 <code>string</code>或<code>null</code>或<code>undefined</code>，你可以使用联合类型<code>string | null | undefined</code>。为了避免常见问题，尽可能的使用 <code>--strictNullChecks</code></p><h4 id="Never"><a href="#Never" class="headerlink" title="Never"></a>Never</h4><p><code>never</code>类型表示的是那些永不存在的值的类型。 例如， <code>never</code>类型是那些总是会抛出异常或根本就不会有返回值的函数表达式或箭头函数表达式的返回值类型； 变量也可能是 <code>never</code>类型，当它们被永不为真的类型保护所约束时。</p><p>never类型是任何类型的子类型，也可以赋值给任何类型；然而，没有类型是<code>never</code>的子类型或可以赋值给<code>never</code>类型（除了<code>never</code>本身之外）。 即使 <code>any</code>也不可以赋值给<code>never</code>。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 返回never的函数必须存在无法达到的终点</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">error</span>(<span class="params">message: <span class="built_in">string</span></span>): <span class="title">never</span> </span>&#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(message);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 推断的返回值类型为never</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fail</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> error(<span class="string">"Something failed"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 返回never的函数必须存在无法达到的终点</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">infiniteLoop</span>(<span class="params"></span>): <span class="title">never</span> </span>&#123;</span><br><span class="line">    <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Object"><a href="#Object" class="headerlink" title="Object"></a>Object</h4><p><code>object</code>表示非原始类型，也就是除<code>number</code>，<code>string</code>，<code>boolean</code>，<code>symbol</code>，<code>null</code>或<code>undefined</code>之外的类型。<br>使用<code>object</code>类型，就可以更好的表示像Object.create这样的API。例如：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">declare</span> <span class="function"><span class="keyword">function</span> <span class="title">create</span>(<span class="params">o: object | <span class="literal">null</span></span>): <span class="title">void</span></span>;</span><br><span class="line"></span><br><span class="line">create(&#123; prop: <span class="number">0</span> &#125;); <span class="comment">// OK</span></span><br><span class="line">create(<span class="literal">null</span>); <span class="comment">// OK</span></span><br><span class="line"></span><br><span class="line">create(<span class="number">42</span>); <span class="comment">// Error</span></span><br><span class="line">create(<span class="string">"string"</span>); <span class="comment">// Error</span></span><br><span class="line">create(<span class="literal">false</span>); <span class="comment">// Error</span></span><br><span class="line">create(<span class="literal">undefined</span>); <span class="comment">// Error</span></span><br></pre></td></tr></table></figure><h3 id="类型断言"><a href="#类型断言" class="headerlink" title="类型断言"></a>类型断言</h3><p>有时候你会遇到这样的情况，你会比ts更了解某个值的详细信息。 通常这会发生在你清楚地知道一个实体具有比它现有类型更确切的类型。</p><p>通过类型断言这种方式可以告诉编译器，“相信我，我知道自己在干什么”。 类型断言好比其它语言里的类型转换，但是不进行特殊的数据检查和解构。 它没有运行时的影响，只是在编译阶段起作用。 ts会假设你，程序员，已经进行了必须的检查。</p><p>类型断言有两种形式。 其一是“尖括号”语法：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> someValue: <span class="built_in">any</span> = <span class="string">"this is a string"</span>;</span><br><span class="line"><span class="keyword">let</span> strLength: <span class="built_in">number</span> = (&lt;<span class="built_in">string</span>&gt;someValue).length;</span><br></pre></td></tr></table></figure><p>另一个为<code>as</code>语法：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> someValue: <span class="built_in">any</span> = <span class="string">"this is a string"</span>;</span><br><span class="line"><span class="keyword">let</span> strLength: <span class="built_in">number</span> = (someValue <span class="keyword">as</span> <span class="built_in">string</span>).length;</span><br></pre></td></tr></table></figure><p>两种形式是等价的。 至于使用哪个大多数情况下是凭个人喜好；然而，当你在ts里使用<code>JSX</code>时，只有 <code>as</code>语法断言是被允许的。</p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> TypeScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>nginx开启gzip和缓存</title>
      <link href="/nginx/enable-nginx-gzip-and-cache/"/>
      <url>/nginx/enable-nginx-gzip-and-cache/</url>
      
        <content type="html"><![CDATA[<h3 id="极简配置"><a href="#极简配置" class="headerlink" title="极简配置"></a>极简配置</h3><p>在站点的配置文件中(例如<code>website.conf</code>)的server中添加<code>gzip on</code>.</p><a id="more"></a><figure class="highlight nginx"><figcaption><span>website.conf</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">server&#123;</span><br><span class="line">  <span class="attribute">gzip</span> <span class="literal">on</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="常规配置"><a href="#常规配置" class="headerlink" title="常规配置"></a>常规配置</h3><p>按照下面代码进行配置</p><figure class="highlight nginx"><figcaption><span>website.conf</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">server&#123;</span><br><span class="line">  <span class="attribute">gzip</span> <span class="literal">on</span>; <span class="comment"># 是否开启gzip</span></span><br><span class="line">  <span class="attribute">gzip_buffers</span> <span class="number">32</span> <span class="number">4K</span>; <span class="comment"># 缓冲(压缩在内存中缓冲几块? 每块多大?)</span></span><br><span class="line">  <span class="attribute">gzip_comp_level</span> <span class="number">6</span>; <span class="comment"># 推荐6 压缩级别(级别越高,压的越小,越浪费CPU计算资源)</span></span><br><span class="line">  <span class="attribute">gzip_min_length</span> <span class="number">1k</span>; <span class="comment"># 开始压缩的最小长度(再小就不要压缩了,意义不在)</span></span><br><span class="line">  <span class="attribute">gzip_types</span> application/javascript text/css text/xml; <span class="comment"># 对哪些类型的文件用压缩 如txt,xml,html ,css</span></span><br><span class="line">  <span class="attribute">gzip_disable</span> <span class="string">"MSIE [1-6]\."</span>; <span class="comment">#正则匹配UA，配置禁用gzip条件。此处表示ie6及以下不启用gzip（因为ie低版本不支持）</span></span><br><span class="line">  <span class="attribute">gzip_http_version</span> <span class="number">1</span>.<span class="number">1</span>; <span class="comment"># 开始压缩的http协议版本(可以不设置,目前几乎全是1.1协议)</span></span><br><span class="line">  <span class="attribute">gzip_vary</span> <span class="literal">on</span>; <span class="comment"># 是否传输gzip压缩标志</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>保存并重启nginx，刷新页面（为了避免缓存，请强制刷新）就能看到效果了。以谷歌浏览器为例，通过F12看请求的响应头部。</p><h3 id="gzip参数详解"><a href="#gzip参数详解" class="headerlink" title="gzip参数详解"></a>gzip参数详解</h3><h4 id="gzip"><a href="#gzip" class="headerlink" title="gzip"></a>gzip</h4><figure class="highlight nginx"><figcaption><span>website.conf</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#打开或关闭gzip</span></span><br><span class="line"><span class="attribute">gzip</span> <span class="literal">on</span>; <span class="comment"># on | off</span></span><br></pre></td></tr></table></figure><p>解释：打开或关闭gzip</p><h4 id="gzip-buffers"><a href="#gzip-buffers" class="headerlink" title="gzip_buffers"></a>gzip_buffers</h4><figure class="highlight nginx"><figcaption><span>website.conf</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 设置用于处理请求压缩的缓冲区数量和大小</span></span><br><span class="line"><span class="comment"># 比如32 4K表示按照内存页（one memory page）大小以4K为单位（即一个系统中内存页为4K），申请32倍的内存空间。建议此项不设置，使用默认值</span></span><br><span class="line"><span class="attribute">gzip_buffers</span> <span class="number">32</span> <span class="number">4k</span>;</span><br></pre></td></tr></table></figure><h4 id="gzip-comp-level"><a href="#gzip-comp-level" class="headerlink" title="gzip_comp_level"></a>gzip_comp_level</h4><figure class="highlight nginx"><figcaption><span>website.conf</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 设置gzip压缩级别，取值 1-9</span></span><br><span class="line"><span class="comment"># 值越高越消耗cpu的性能，高并发情况下cpu可能达到100%</span></span><br><span class="line"><span class="comment"># 级别越底压缩速度越快文件压缩比越小，反之速度越慢文件压缩比越大，一般6之后压缩比很难提升</span></span><br><span class="line"><span class="comment"># 一方面，gzip_comp_level 1的压缩能力已经够用。另一方面，压缩一定要和静态资源缓存相结合，缓存压缩后的版本，否则每次都压缩高负载下服务器肯定吃不住。</span></span><br><span class="line"><span class="attribute">gzip_comp_level</span> <span class="number">2</span>;</span><br></pre></td></tr></table></figure><h4 id="gzip-disable"><a href="#gzip-disable" class="headerlink" title="gzip_disable"></a>gzip_disable</h4><figure class="highlight nginx"><figcaption><span>website.conf</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 表明哪些UA(usergent)头不使用gzip压缩，可以正则</span></span><br><span class="line"><span class="attribute">gzip_disable</span> <span class="string">"MSIE [1-6]\."</span>;</span><br></pre></td></tr></table></figure><h4 id="gzip-min-length"><a href="#gzip-min-length" class="headerlink" title="gzip_min_length"></a>gzip_min_length</h4><figure class="highlight nginx"><figcaption><span>website.conf</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 当返回内容大于此值时才会使用gzip进行压缩,以k为单位,当值为0时，所有页面都进行压缩。</span></span><br><span class="line"><span class="attribute">gzip_min_length</span> <span class="number">1k</span>; <span class="comment"># 100 | 500 | 1k</span></span><br></pre></td></tr></table></figure><h4 id="gzip-http-version"><a href="#gzip-http-version" class="headerlink" title="gzip_http_version"></a>gzip_http_version</h4><figure class="highlight nginx"><figcaption><span>website.conf</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 用于识别http协议的版本，早期的浏览器不支持gzip压缩，用户会看到乱码，所以为了支持前期版本加了此选项。默认在http/1.0的协议下不开启gzip压缩。</span></span><br><span class="line"><span class="attribute">gzip_http_version</span> <span class="number">1</span>.<span class="number">1</span>; <span class="comment"># 1.0 | 1.1</span></span><br></pre></td></tr></table></figure><h4 id="gzip-proxied"><a href="#gzip-proxied" class="headerlink" title="gzip_proxied"></a>gzip_proxied</h4><figure class="highlight nginx"><figcaption><span>website.conf</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Nginx做为反向代理的时候启用:</span></span><br><span class="line"><span class="comment">#   off – 关闭所有的代理结果数据压缩，默认值</span></span><br><span class="line"><span class="comment">#   expired – 如果header中包含”Expires”头信息，启用压缩</span></span><br><span class="line"><span class="comment">#   no-cache – 如果header中包含”Cache-Control:no-cache”头信息，启用压缩</span></span><br><span class="line"><span class="comment">#   no-store – 如果header中包含”Cache-Control:no-store”头信息，启用压缩</span></span><br><span class="line"><span class="comment">#   private – 如果header中包含”Cache-Control:private”头信息，启用压缩</span></span><br><span class="line"><span class="comment">#   no_last_modified – 启用压缩，如果header中包含”Last_Modified”头信息，启用压缩</span></span><br><span class="line"><span class="comment">#   no_etag – 启用压缩，如果header中包含“ETag”头信息，启用压缩</span></span><br><span class="line"><span class="comment">#   auth – 启用压缩，如果header中包含“Authorization”头信息，启用压缩</span></span><br><span class="line"><span class="comment">#   any – 无条件压缩所有结果数据</span></span><br><span class="line"><span class="attribute">gzip_proxied</span>  <span class="literal">off</span>;</span><br></pre></td></tr></table></figure><h4 id="gzip-vary"><a href="#gzip-vary" class="headerlink" title="gzip_vary"></a>gzip_vary</h4><figure class="highlight nginx"><figcaption><span>website.conf</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 浏览器请求增加响应头"Vary: Accept-Encoding"</span></span><br><span class="line"><span class="attribute">gzip_vary</span> <span class="literal">on</span>;</span><br></pre></td></tr></table></figure><h4 id="gzip-types"><a href="#gzip-types" class="headerlink" title="gzip_types"></a>gzip_types</h4><figure class="highlight nginx"><figcaption><span>website.conf</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 设置需要压缩的MIME类型,如果不在设置类型范围内的请求不进行压缩，其中的值可以在 mime.types 文件中找到</span></span><br><span class="line"><span class="comment"># 压缩字体类型 font/ttf font/otf image/svg+xml</span></span><br><span class="line"><span class="attribute">gzip_types</span>  text/plain application/javascript application/x-javascript text/css application/xml text/javascript application/x-httpd-php image/jpeg image/gif image/png font/ttf font/otf image/svg+xml;</span><br></pre></td></tr></table></figure><p>这里需要说明一些特殊的类型，使用”字体类型”的资源，而这些资源类型往往会被忽略，且这些资源又比较大，没有被压缩很不合算。（可以参考：<a href="http://www.darrenfang.com/2015/01/setting-up-http-cache-and-gzip-with-nginx/）" target="_blank" rel="noopener">http://www.darrenfang.com/2015/01/setting-up-http-cache-and-gzip-with-nginx/）</a></p><h3 id="开启缓存"><a href="#开启缓存" class="headerlink" title="开启缓存"></a>开启缓存</h3><figure class="highlight nginx"><figcaption><span>website.conf</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 缓存图片</span></span><br><span class="line"><span class="attribute">location</span> <span class="regexp">~* ^.+\.(ico|gif|jpg|jpeg|png)$</span> &#123; </span><br><span class="line">  <span class="attribute">access_log</span>   <span class="literal">off</span>; </span><br><span class="line">  <span class="attribute">expires</span>      <span class="number">30d</span>; <span class="comment">#根据自己需要修改时间</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">#缓存js、css、视频文件</span></span><br><span class="line"><span class="attribute">location</span> <span class="regexp">~* ^.+\.(css|js|txt|xml|swf|wav)$</span> &#123;</span><br><span class="line">  <span class="attribute">access_log</span>   <span class="literal">off</span>;</span><br><span class="line">  <span class="attribute">expires</span>      <span class="number">24h</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 缓存html类型文件</span></span><br><span class="line"><span class="attribute">location</span> <span class="regexp">~* ^.+\.(html|htm)$</span> &#123;</span><br><span class="line">  <span class="attribute">expires</span>      <span class="number">1h</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 缓存字体文件，配合gzip更好</span></span><br><span class="line"><span class="attribute">location</span> <span class="regexp">~* ^.+\.(eot|ttf|otf|woff|svg)$</span> &#123;</span><br><span class="line">  <span class="attribute">access_log</span>   <span class="literal">off</span>;</span><br><span class="line">  <span class="attribute">expires</span> <span class="number">30d</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> nginx </category>
          
      </categories>
      
      
        <tags>
            
            <tag> nginx </tag>
            
            <tag> gzip </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>mysql root账户远程不能登录解决方法</title>
      <link href="/database/mysql-remote-can-not-login/"/>
      <url>/database/mysql-remote-can-not-login/</url>
      
        <content type="html"><![CDATA[<h3 id="原因"><a href="#原因" class="headerlink" title="原因"></a>原因</h3><p>mysql 远程不能登录一般是没有设置 <em>host</em> 为 <em>%</em> 或者对应的ip地址<br>这种情况下一般是通过修改原来 <em>root</em> 账户的 <em>host</em> 为 <em>%</em> 来进行远程登录，但是这种设置也是有一个缺点，就是某种情况下本地命令行就不能登录了。</p><a id="more"></a><h3 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h3><p>所以正确的做法是新创建一个 <em>root</em> 账户，但是 <em>host</em> 为 <em>%</em> 。具体操作为</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">GRANT ALL PRIVILEGES ON *.* TO &#39;root&#39;@&#39;%&#39; IDENTIFIED BY &#39;12306&#39; WITH GRANT OPTION; -- 12306 是密码</span><br><span class="line">flush privileges;</span><br></pre></td></tr></table></figure><p>这时候在使用远程连接工具登录 <em>root</em> 账户就可以了。<br>总结一下，就是如果需要用户在本地和远程都可以连接，则需要创建两个账户，一个 <em>host</em> 为 <em>localhost</em>;另一个 <em>host</em> 为 <em>%</em>,当然这种方式并不安全，建议两个用户密码不一样</p><h3 id="语句分析"><a href="#语句分析" class="headerlink" title="语句分析"></a>语句分析</h3><ul><li><em>ALL PRIVILEGES</em><br>  表示将所有权限授予给用户。也可指定具体的权限，如：SELECT,CREATE,DROP等。<br>  GRANT SELECT,CREATE,UPDATE,ALTER,DROP ON….</li><li><em>ON</em><br>  表示这些权限对哪些数据库和表生效，格式：数据库名.表名，这里写“*”表示所有数据库，所有表。如果我要指定将权限应用到test库的user表中，可以这么写：test.user</li><li><em>TO</em><br>  将权限授予哪个用户。格式：”用户名”@”登录IP或域名或%”。%表示没有限制，在任何主机都可以登录。比如：”web_user”@”192.168.0.%”,表示web_user这个用户只能在192.168.0IP段登录</li><li><em>IDENTIFIED BY</em><br>  指定用户的登录密码</li><li><em>WITH GRANT OPTION</em><br>  表示允许用户将自己的权限授权给其它用户</li><li><em>flush privileges</em><br>  更新权限信息<br>使用GRANT给用户添加权限，权限会自动叠加，不会覆盖之前授予的权限，比如你先给用户添加一个SELECT权限，后来又给用户添加了一个INSERT权限，那么该用户就同时拥有了SELECT和INSERT权限。</li></ul><p><a href="https://dev.mysql.com/doc/refman/5.7/en/privileges-provided.html" target="_blank" rel="noopener">详细的权限列表信息</a></p>]]></content>
      
      
      <categories>
          
          <category> mysql </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CentOS 7 + Apache 配置https + wss转发</title>
      <link href="/apache/enable-apache-https-and-forward-wss/"/>
      <url>/apache/enable-apache-https-and-forward-wss/</url>
      
        <content type="html"><![CDATA[<h3 id="安装openssl库"><a href="#安装openssl库" class="headerlink" title="安装openssl库"></a>安装openssl库</h3><p>1.检查是否已安装 <code>openssl</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">openssl version -a</span><br><span class="line"><span class="comment"># 打印出下面类似的信息表明已安装</span></span><br><span class="line"><span class="comment"># OpenSSL 1.0.2k-fips  26 Jan 2017.....</span></span><br><span class="line"><span class="comment"># built on: reproducible build, date unspecified</span></span><br></pre></td></tr></table></figure><a id="more"></a><blockquote><p>如果未安装，可以使用  <code>yum install openssl</code> 或参考其他方式</p></blockquote><p>2.检查apache是否已安装ssl模块</p><blockquote><p>查看  <code>/etc/httpd/conf.d/ssl.conf</code> 文件是否存在，如果不存在 使用命令安装 </p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install mod_ssl</span><br></pre></td></tr></table></figure><p>3.检查是否已启用apache的 <code>proxy</code>模块</p><blockquote><p>打开 <code>/etc/httpd/conf.modules.d/</code>文件夹，查看是否存在 <code>proxy.conf</code> 文件名(有可能是<code>00-proxy.conf</code>)的文件,如果不存在，可能需要重新编译安装apache，请联系服务器维护人员。如果存在查看时候有一下代码</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">LoadModule proxy_module modules/mod_proxy.so</span><br><span class="line">LoadModule proxy_http_module modules/mod_proxy_http.so</span><br><span class="line">LoadModule proxy_wstunnel_module modules/mod_proxy_wstunnel.so</span><br><span class="line">LoadModule proxy_connect_module modules/mod_proxy_connect.so</span><br></pre></td></tr></table></figure><p>不存在请联系服务器维护人员</p><h3 id="生成ssl证书"><a href="#生成ssl证书" class="headerlink" title="生成ssl证书"></a>生成ssl证书</h3><p>1.如果没有证书文件，可以创建本地文件测试</p><blockquote><p>输入命令，生成2048位加密私钥 </p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">openssl genrsa -out server1.key 2048</span><br></pre></td></tr></table></figure><blockquote><p>然后输入命令，生成证书签名请求（CSR），这里需要填写许多信息，如国家，省市，公司，域名等，<code>域名</code> 必须填写正确，其他可以随便填写</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">openssl req -new -key server1.key -out server1.csr</span><br></pre></td></tr></table></figure><blockquote><p>最后输入命令，生成类型为X509的自签名证书。有效期设置3650天，即有效期为10年</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">openssl x509 -req -days 3650 -<span class="keyword">in</span> server1.csr -signkey server1.key -out server1.crt</span><br></pre></td></tr></table></figure><blockquote><p>参考文件连接 <a href="https://www.linuxidc.com/Linux/2018-08/153555.htm" target="_blank" rel="noopener">https://www.linuxidc.com/Linux/2018-08/153555.htm</a></p></blockquote><p>2.移动证书文件</p><blockquote><p>在 <code>/etc/httpd/</code>文件夹下面创建一个 crt文件夹，将提供的证书文件移动到里面。</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">xxxx.crt <span class="comment"># 证书文件</span></span><br><span class="line">xxxx.key <span class="comment"># 证书秘钥文件</span></span><br></pre></td></tr></table></figure><h3 id="配置ssl"><a href="#配置ssl" class="headerlink" title="配置ssl"></a>配置ssl</h3><blockquote><p>打开 <code>/etc/httpd/conf.d/ssl.conf</code> 文件，找到 <code>&lt;VirtualHost _default_:443&gt;</code> 这一行，在其后面添加</p></blockquote><figure class="highlight apache"><figcaption><span>ssl.conf</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute"><span class="nomarkup">DocumentRoot</span></span> <span class="string">"/var/www/html"</span> # 指向web的地址，一般不需要修改</span><br><span class="line"></span><br><span class="line"><span class="comment"># 配置域名，域名必须和证书的名称一致 </span></span><br><span class="line"><span class="comment"># 例如 aaaa.com  -&gt; ServerName aaaa.com:443</span></span><br><span class="line"><span class="attribute"><span class="nomarkup">ServerName</span></span> www.example.com:443</span><br></pre></td></tr></table></figure><blockquote><p>然后找到 <code>SSLEngine on</code> 这一行代码，在下面添加</p></blockquote><figure class="highlight apache"><figcaption><span>ssl.conf</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">SSLProxyEngine</span> <span class="literal">on</span></span><br><span class="line"><span class="attribute">ProxyRequests</span> <span class="literal">Off</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 转发 streams流</span></span><br><span class="line"><span class="attribute">ProxyPass</span> /streams http://127.0.0.1:6666/streams</span><br><span class="line"><span class="comment"># 状态码302相关</span></span><br><span class="line"><span class="attribute">ProxyPassReverse</span> /streams http://127.0.0.1:6666/streams</span><br><span class="line"></span><br><span class="line"><span class="comment"># 转发wss 协议到 ws协议</span></span><br><span class="line"><span class="attribute">ProxyPass</span> /wss ws://127.0.0.1:8888</span><br><span class="line"><span class="comment"># 状态码302相关</span></span><br><span class="line"><span class="attribute">ProxyPassReverse</span> /wss ws://127.0.0.1:8888</span><br></pre></td></tr></table></figure><blockquote><p>然后找到 <code>SSLHonorCipherOrder on</code>这行代码把前面的 # 号去掉</p></blockquote><blockquote><p>然后找到 <code>SSLCertificateFile /etc/pki/tls/certs/localhost.crt</code> 把里面的文件地址改为证书文件crt文件的地址<code>/etc/httpd/crt/xxxx.crt</code></p></blockquote><blockquote><p>然后找到 <code>SSLCertificateKeyFile /etc/pki/tls/private/localhost.key</code> 把里面的文件地址改为证书秘钥文件key文件的地址<code>/etc/httpd/crt/xxxx.key</code></p></blockquote><blockquote><p>然后保存，重启httpd服务 <code>systemctl restart httpd</code></p></blockquote><hr><details ><summary> <p>配置过的ssl.conf文件 可参考</p> </summary>              <div class='content'>              <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br></pre></td><td class="code"><pre><span class="line">    <span class="comment">#</span></span><br><span class="line"><span class="comment"># When we also provide SSL we have to listen to the </span></span><br><span class="line"><span class="comment"># the HTTPS port in addition.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line">Listen 443 https</span><br><span class="line"></span><br><span class="line"><span class="comment">##</span></span><br><span class="line"><span class="comment">##  SSL Global Context</span></span><br><span class="line"><span class="comment">##</span></span><br><span class="line"><span class="comment">##  All SSL configuration in this context applies both to</span></span><br><span class="line"><span class="comment">##  the main server and all SSL-enabled virtual hosts.</span></span><br><span class="line"><span class="comment">##</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#   Pass Phrase Dialog:</span></span><br><span class="line"><span class="comment">#   Configure the pass phrase gathering process.</span></span><br><span class="line"><span class="comment">#   The filtering dialog program (`builtin' is a internal</span></span><br><span class="line"><span class="comment">#   terminal dialog) has to provide the pass phrase on stdout.</span></span><br><span class="line">SSLPassPhraseDialog <span class="built_in">exec</span>:/usr/libexec/httpd-ssl-pass-dialog</span><br><span class="line"></span><br><span class="line"><span class="comment">#   Inter-Process Session Cache:</span></span><br><span class="line"><span class="comment">#   Configure the SSL Session Cache: First the mechanism </span></span><br><span class="line"><span class="comment">#   to use and second the expiring timeout (in seconds).</span></span><br><span class="line">SSLSessionCache         shmcb:/run/httpd/sslcache(512000)</span><br><span class="line">SSLSessionCacheTimeout  300</span><br><span class="line"></span><br><span class="line"><span class="comment">#   Pseudo Random Number Generator (PRNG):</span></span><br><span class="line"><span class="comment">#   Configure one or more sources to seed the PRNG of the </span></span><br><span class="line"><span class="comment">#   SSL library. The seed data should be of good random quality.</span></span><br><span class="line"><span class="comment">#   WARNING! On some platforms /dev/random blocks if not enough entropy</span></span><br><span class="line"><span class="comment">#   is available. This means you then cannot use the /dev/random device</span></span><br><span class="line"><span class="comment">#   because it would lead to very long connection times (as long as</span></span><br><span class="line"><span class="comment">#   it requires to make more entropy available). But usually those</span></span><br><span class="line"><span class="comment">#   platforms additionally provide a /dev/urandom device which doesn't</span></span><br><span class="line"><span class="comment">#   block. So, if available, use this one instead. Read the mod_ssl User</span></span><br><span class="line"><span class="comment">#   Manual for more details.</span></span><br><span class="line">SSLRandomSeed startup file:/dev/urandom  256</span><br><span class="line">SSLRandomSeed connect <span class="built_in">builtin</span></span><br><span class="line"><span class="comment">#SSLRandomSeed startup file:/dev/random  512</span></span><br><span class="line"><span class="comment">#SSLRandomSeed connect file:/dev/random  512</span></span><br><span class="line"><span class="comment">#SSLRandomSeed connect file:/dev/urandom 512</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Use "SSLCryptoDevice" to enable any supported hardware</span></span><br><span class="line"><span class="comment"># accelerators. Use "openssl engine -v" to list supported</span></span><br><span class="line"><span class="comment"># engine names.  <span class="doctag">NOTE:</span> If you enable an accelerator and the</span></span><br><span class="line"><span class="comment"># server does not start, consult the error logs and ensure</span></span><br><span class="line"><span class="comment"># your accelerator is functioning properly. </span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line">SSLCryptoDevice <span class="built_in">builtin</span></span><br><span class="line"><span class="comment">#SSLCryptoDevice ubsec</span></span><br><span class="line"></span><br><span class="line"><span class="comment">##</span></span><br><span class="line"><span class="comment">## SSL Virtual Host Context</span></span><br><span class="line"><span class="comment">##</span></span><br><span class="line"></span><br><span class="line">&lt;VirtualHost _default_:443&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># General setup for the virtual host, inherited from global configuration</span></span><br><span class="line">DocumentRoot <span class="string">"/var/www/html"</span></span><br><span class="line">ServerName aaaaaaaaaa.com:443</span><br><span class="line"></span><br><span class="line"><span class="comment"># Use separate log files for the SSL virtual host; note that LogLevel</span></span><br><span class="line"><span class="comment"># is not inherited from httpd.conf.</span></span><br><span class="line">ErrorLog logs/ssl_error_log</span><br><span class="line">TransferLog logs/ssl_access_log</span><br><span class="line">LogLevel warn</span><br><span class="line"></span><br><span class="line"><span class="comment">#   SSL Engine Switch:</span></span><br><span class="line"><span class="comment">#   Enable/Disable SSL for this virtual host.</span></span><br><span class="line">SSLEngine on</span><br><span class="line"></span><br><span class="line">SSLProxyEngine on</span><br><span class="line"></span><br><span class="line">ProxyRequests Off</span><br><span class="line"> </span><br><span class="line">ProxyPass /streams http://127.0.0.1:3096/streams</span><br><span class="line"> </span><br><span class="line">ProxyPassReverse /streams http://127.0.0.1:3096/streams</span><br><span class="line"></span><br><span class="line">ProxyPass /wss ws://127.0.0.1:3098</span><br><span class="line"> </span><br><span class="line">ProxyPassReverse /wss ws://127.0.0.1:3098</span><br><span class="line"></span><br><span class="line"><span class="comment">#   SSL Protocol support:</span></span><br><span class="line"><span class="comment"># List the enable protocol levels with which clients will be able to</span></span><br><span class="line"><span class="comment"># connect.  Disable SSLv2 access by default:</span></span><br><span class="line">SSLProtocol all -SSLv2 -SSLv3</span><br><span class="line"></span><br><span class="line"><span class="comment">#   SSL Cipher Suite:</span></span><br><span class="line"><span class="comment">#   List the ciphers that the client is permitted to negotiate.</span></span><br><span class="line"><span class="comment">#   See the mod_ssl documentation for a complete list.</span></span><br><span class="line">SSLCipherSuite HIGH:3DES:!aNULL:!MD5:!SEED:!IDEA</span><br><span class="line"></span><br><span class="line"><span class="comment">#   Speed-optimized SSL Cipher configuration:</span></span><br><span class="line"><span class="comment">#   If speed is your main concern (on busy HTTPS servers e.g.),</span></span><br><span class="line"><span class="comment">#   you might want to force clients to specific, performance</span></span><br><span class="line"><span class="comment">#   optimized ciphers. In this case, prepend those ciphers</span></span><br><span class="line"><span class="comment">#   to the SSLCipherSuite list, and enable SSLHonorCipherOrder.</span></span><br><span class="line"><span class="comment">#   Caveat: by giving precedence to RC4-SHA and AES128-SHA</span></span><br><span class="line"><span class="comment">#   (as in the example below), most connections will no longer</span></span><br><span class="line"><span class="comment">#   have perfect forward secrecy - if the server's key is</span></span><br><span class="line"><span class="comment">#   compromised, captures of past or future traffic must be</span></span><br><span class="line"><span class="comment">#   considered compromised, too.</span></span><br><span class="line"><span class="comment">#SSLCipherSuite RC4-SHA:AES128-SHA:HIGH:MEDIUM:!aNULL:!MD5</span></span><br><span class="line">SSLHonorCipherOrder on </span><br><span class="line"></span><br><span class="line"><span class="comment">#   Server Certificate:</span></span><br><span class="line"><span class="comment"># Point SSLCertificateFile at a PEM encoded certificate.  If</span></span><br><span class="line"><span class="comment"># the certificate is encrypted, then you will be prompted for a</span></span><br><span class="line"><span class="comment"># pass phrase.  Note that a kill -HUP will prompt again.  A new</span></span><br><span class="line"><span class="comment"># certificate can be generated using the genkey(1) command.</span></span><br><span class="line">SSLCertificateFile /etc/httpd/crt/server1.crt</span><br><span class="line"></span><br><span class="line"><span class="comment">#   Server Private Key:</span></span><br><span class="line"><span class="comment">#   If the key is not combined with the certificate, use this</span></span><br><span class="line"><span class="comment">#   directive to point at the key file.  Keep in mind that if</span></span><br><span class="line"><span class="comment">#   you've both a RSA and a DSA private key you can configure</span></span><br><span class="line"><span class="comment">#   both in parallel (to also allow the use of DSA ciphers, etc.)</span></span><br><span class="line">SSLCertificateKeyFile /etc/httpd/crt/server1.key</span><br><span class="line"></span><br><span class="line"><span class="comment">#   Server Certificate Chain:</span></span><br><span class="line"><span class="comment">#   Point SSLCertificateChainFile at a file containing the</span></span><br><span class="line"><span class="comment">#   concatenation of PEM encoded CA certificates which form the</span></span><br><span class="line"><span class="comment">#   certificate chain for the server certificate. Alternatively</span></span><br><span class="line"><span class="comment">#   the referenced file can be the same as SSLCertificateFile</span></span><br><span class="line"><span class="comment">#   when the CA certificates are directly appended to the server</span></span><br><span class="line"><span class="comment">#   certificate for convinience.</span></span><br><span class="line"><span class="comment">#SSLCertificateChainFile /etc/pki/tls/certs/server-chain.crt</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#   Certificate Authority (CA):</span></span><br><span class="line"><span class="comment">#   Set the CA certificate verification path where to find CA</span></span><br><span class="line"><span class="comment">#   certificates for client authentication or alternatively one</span></span><br><span class="line"><span class="comment">#   huge file containing all of them (file must be PEM encoded)</span></span><br><span class="line"><span class="comment">#SSLCACertificateFile /etc/pki/tls/certs/ca-bundle.crt</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#   Client Authentication (Type):</span></span><br><span class="line"><span class="comment">#   Client certificate verification type and depth.  Types are</span></span><br><span class="line"><span class="comment">#   none, optional, require and optional_no_ca.  Depth is a</span></span><br><span class="line"><span class="comment">#   number which specifies how deeply to verify the certificate</span></span><br><span class="line"><span class="comment">#   issuer chain before deciding the certificate is not valid.</span></span><br><span class="line"><span class="comment">#SSLVerifyClient require</span></span><br><span class="line"><span class="comment">#SSLVerifyDepth  10</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#   Access Control:</span></span><br><span class="line"><span class="comment">#   With SSLRequire you can do per-directory access control based</span></span><br><span class="line"><span class="comment">#   on arbitrary complex boolean expressions containing server</span></span><br><span class="line"><span class="comment">#   variable checks and other lookup directives.  The syntax is a</span></span><br><span class="line"><span class="comment">#   mixture between C and Perl.  See the mod_ssl documentation</span></span><br><span class="line"><span class="comment">#   for more details.</span></span><br><span class="line"><span class="comment">#&lt;Location /&gt;</span></span><br><span class="line"><span class="comment">#SSLRequire (    %&#123;SSL_CIPHER&#125; !~ m/^(EXP|NULL)/ \</span></span><br><span class="line"><span class="comment">#            and %&#123;SSL_CLIENT_S_DN_O&#125; eq "Snake Oil, Ltd." \</span></span><br><span class="line"><span class="comment">#            and %&#123;SSL_CLIENT_S_DN_OU&#125; in &#123;"Staff", "CA", "Dev"&#125; \</span></span><br><span class="line"><span class="comment">#            and %&#123;TIME_WDAY&#125; &gt;= 1 and %&#123;TIME_WDAY&#125; &lt;= 5 \</span></span><br><span class="line"><span class="comment">#            and %&#123;TIME_HOUR&#125; &gt;= 8 and %&#123;TIME_HOUR&#125; &lt;= 20       ) \</span></span><br><span class="line"><span class="comment">#           or %&#123;REMOTE_ADDR&#125; =~ m/^192\.76\.162\.[0-9]+$/</span></span><br><span class="line"><span class="comment">#&lt;/Location&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#   SSL Engine Options:</span></span><br><span class="line"><span class="comment">#   Set various options for the SSL engine.</span></span><br><span class="line"><span class="comment">#   o FakeBasicAuth:</span></span><br><span class="line"><span class="comment">#     Translate the client X.509 into a Basic Authorisation.  This means that</span></span><br><span class="line"><span class="comment">#     the standard Auth/DBMAuth methods can be used for access control.  The</span></span><br><span class="line"><span class="comment">#     user name is the `one line' version of the client's X.509 certificate.</span></span><br><span class="line"><span class="comment">#     Note that no password is obtained from the user. Every entry in the user</span></span><br><span class="line"><span class="comment">#     file needs this password: `xxj31ZMTZzkVA'.</span></span><br><span class="line"><span class="comment">#   o ExportCertData:</span></span><br><span class="line"><span class="comment">#     This exports two additional environment variables: SSL_CLIENT_CERT and</span></span><br><span class="line"><span class="comment">#     SSL_SERVER_CERT. These contain the PEM-encoded certificates of the</span></span><br><span class="line"><span class="comment">#     server (always existing) and the client (only existing when client</span></span><br><span class="line"><span class="comment">#     authentication is used). This can be used to import the certificates</span></span><br><span class="line"><span class="comment">#     into CGI scripts.</span></span><br><span class="line"><span class="comment">#   o StdEnvVars:</span></span><br><span class="line"><span class="comment">#     This exports the standard SSL/TLS related `SSL_*' environment variables.</span></span><br><span class="line"><span class="comment">#     Per default this exportation is switched off for performance reasons,</span></span><br><span class="line"><span class="comment">#     because the extraction step is an expensive operation and is usually</span></span><br><span class="line"><span class="comment">#     useless for serving static content. So one usually enables the</span></span><br><span class="line"><span class="comment">#     exportation for CGI and SSI requests only.</span></span><br><span class="line"><span class="comment">#   o StrictRequire:</span></span><br><span class="line"><span class="comment">#     This denies access when "SSLRequireSSL" or "SSLRequire" applied even</span></span><br><span class="line"><span class="comment">#     under a "Satisfy any" situation, i.e. when it applies access is denied</span></span><br><span class="line"><span class="comment">#     and no other module can change it.</span></span><br><span class="line"><span class="comment">#   o OptRenegotiate:</span></span><br><span class="line"><span class="comment">#     This enables optimized SSL connection renegotiation handling when SSL</span></span><br><span class="line"><span class="comment">#     directives are used in per-directory context. </span></span><br><span class="line"><span class="comment">#SSLOptions +FakeBasicAuth +ExportCertData +StrictRequire</span></span><br><span class="line">&lt;Files ~ <span class="string">"\.(cgi|shtml|phtml|php3?)$"</span>&gt;</span><br><span class="line">    SSLOptions +StdEnvVars</span><br><span class="line">&lt;/Files&gt;</span><br><span class="line">&lt;Directory <span class="string">"/var/www/cgi-bin"</span>&gt;</span><br><span class="line">    SSLOptions +StdEnvVars</span><br><span class="line">&lt;/Directory&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment">#   SSL Protocol Adjustments:</span></span><br><span class="line"><span class="comment">#   The safe and default but still SSL/TLS standard compliant shutdown</span></span><br><span class="line"><span class="comment">#   approach is that mod_ssl sends the close notify alert but doesn't wait for</span></span><br><span class="line"><span class="comment">#   the close notify alert from client. When you need a different shutdown</span></span><br><span class="line"><span class="comment">#   approach you can use one of the following variables:</span></span><br><span class="line"><span class="comment">#   o ssl-unclean-shutdown:</span></span><br><span class="line"><span class="comment">#     This forces an unclean shutdown when the connection is closed, i.e. no</span></span><br><span class="line"><span class="comment">#     SSL close notify alert is send or allowed to received.  This violates</span></span><br><span class="line"><span class="comment">#     the SSL/TLS standard but is needed for some brain-dead browsers. Use</span></span><br><span class="line"><span class="comment">#     this when you receive I/O errors because of the standard approach where</span></span><br><span class="line"><span class="comment">#     mod_ssl sends the close notify alert.</span></span><br><span class="line"><span class="comment">#   o ssl-accurate-shutdown:</span></span><br><span class="line"><span class="comment">#     This forces an accurate shutdown when the connection is closed, i.e. a</span></span><br><span class="line"><span class="comment">#     SSL close notify alert is send and mod_ssl waits for the close notify</span></span><br><span class="line"><span class="comment">#     alert of the client. This is 100% SSL/TLS standard compliant, but in</span></span><br><span class="line"><span class="comment">#     practice often causes hanging connections with brain-dead browsers. Use</span></span><br><span class="line"><span class="comment">#     this only for browsers where you know that their SSL implementation</span></span><br><span class="line"><span class="comment">#     works correctly. </span></span><br><span class="line"><span class="comment">#   Notice: Most problems of broken clients are also related to the HTTP</span></span><br><span class="line"><span class="comment">#   keep-alive facility, so you usually additionally want to disable</span></span><br><span class="line"><span class="comment">#   keep-alive for those clients, too. Use variable "nokeepalive" for this.</span></span><br><span class="line"><span class="comment">#   Similarly, one has to force some clients to use HTTP/1.0 to workaround</span></span><br><span class="line"><span class="comment">#   their broken HTTP/1.1 implementation. Use variables "downgrade-1.0" and</span></span><br><span class="line"><span class="comment">#   "force-response-1.0" for this.</span></span><br><span class="line">BrowserMatch <span class="string">"MSIE [2-5]"</span> \</span><br><span class="line">         nokeepalive ssl-unclean-shutdown \</span><br><span class="line">         downgrade-1.0 force-response-1.0</span><br><span class="line"></span><br><span class="line"><span class="comment">#   Per-Server Logging:</span></span><br><span class="line"><span class="comment">#   The home of a custom SSL log file. Use this when you want a</span></span><br><span class="line"><span class="comment">#   compact non-error SSL logfile on a virtual host basis.</span></span><br><span class="line">CustomLog logs/ssl_request_log \</span><br><span class="line">          <span class="string">"%t %h %&#123;SSL_PROTOCOL&#125;x %&#123;SSL_CIPHER&#125;x \"%r\" %b"</span></span><br><span class="line"></span><br><span class="line">&lt;/VirtualHost&gt;</span><br></pre></td></tr></table></figure>              </div>            </details>]]></content>
      
      
      <categories>
          
          <category> apache </category>
          
      </categories>
      
      
        <tags>
            
            <tag> centos7 </tag>
            
            <tag> apache </tag>
            
            <tag> https </tag>
            
            <tag> wss </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>忘记 Mysql root账户密码如何修改</title>
      <link href="/database/change-mysql-root-password/"/>
      <url>/database/change-mysql-root-password/</url>
      
        <content type="html"><![CDATA[<h3 id="关闭mysql登录验证"><a href="#关闭mysql登录验证" class="headerlink" title="关闭mysql登录验证"></a>关闭mysql登录验证</h3><p>打开命令行界面 然后输入打开 <em>my.cnf</em> 配置文件的命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/my.cnf</span><br></pre></td></tr></table></figure><a id="more"></a><p>在 [mysqld] 的段中加上一句：skip-grant-tables </p><figure class="highlight plain"><figcaption><span>my.cnf</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[mysqld] </span><br><span class="line">datadir&#x3D;&#x2F;var&#x2F;lib&#x2F;mysql </span><br><span class="line">socket&#x3D;&#x2F;var&#x2F;lib&#x2F;mysql&#x2F;mysql.sock </span><br><span class="line">skip-grant-tables</span><br></pre></td></tr></table></figure><p>然后保存重启mysql </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">// mariadb 如果是mysql，则把mariadb改为mysql</span><br><span class="line">systemctl restart mariadb</span><br></pre></td></tr></table></figure><h3 id="无密码登录"><a href="#无密码登录" class="headerlink" title="无密码登录"></a>无密码登录</h3><p>然后登录</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mysql -uroot -p</span><br><span class="line">// 然后直接回车，要求输入密码的时候也直接回车</span><br></pre></td></tr></table></figure><h3 id="修改密码"><a href="#修改密码" class="headerlink" title="修改密码"></a>修改密码</h3><p>登录之后选择mysql这个数据库然后修改用户密码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">use mysql;  --选择要操作的数据库</span><br><span class="line">UPDATE user SET password &#x3D; password(&#39;vbox_12306&#39;) WHERE User &#x3D; &#39;root&#39;; -- vbox_12306 为密码</span><br></pre></td></tr></table></figure><p>回车之后显示下面的表示成功</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Query OK, 1 row affected (0.00 sec)</span><br><span class="line">Rows matched: 1  Changed: 1  Warnings: 0</span><br></pre></td></tr></table></figure><p>如果提示下面的错误</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">The MySQL server is running with the --skip-grant-tables option so it cannot execute this statement</span><br></pre></td></tr></table></figure><h3 id="刷新权限"><a href="#刷新权限" class="headerlink" title="刷新权限"></a>刷新权限</h3><p>则运行一下刷新权限的命令</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flush privileges;</span><br></pre></td></tr></table></figure><p>然后在执行上面的 update 命令，执行成功之后再次执行 flush 刷新权限命令</p><h3 id="开启密码登录"><a href="#开启密码登录" class="headerlink" title="开启密码登录"></a>开启密码登录</h3><p>此时退出mysql 再次打开 <em>my.cnf</em> 配置文件 把已开始加入的 skip-grant-tables 删除 :wq 保存 ，然后重启mysql</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl restart mariadb</span><br></pre></td></tr></table></figure><p>然后安正常步骤登录mysql。</p>]]></content>
      
      
      <categories>
          
          <category> mysql </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/hello-world/"/>
      <url>/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><a id="more"></a><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
